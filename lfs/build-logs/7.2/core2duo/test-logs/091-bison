Sat Sep  1 06:24:49 GMT 2012
make[1]: Entering directory `/sources/bison-2.6.2'
  GEN      public-submodule-commit
make  check-recursive
make[2]: Entering directory `/sources/bison-2.6.2'
Making check in build-aux
make[3]: Entering directory `/sources/bison-2.6.2/build-aux'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/build-aux'
Making check in po
make[3]: Entering directory `/sources/bison-2.6.2/po'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/po'
Making check in runtime-po
make[3]: Entering directory `/sources/bison-2.6.2/runtime-po'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/runtime-po'
Making check in lib
make[3]: Entering directory `/sources/bison-2.6.2/lib'
make  check-am
make[4]: Entering directory `/sources/bison-2.6.2/lib'
make[4]: Nothing to be done for `check-am'.
make[4]: Leaving directory `/sources/bison-2.6.2/lib'
make[3]: Leaving directory `/sources/bison-2.6.2/lib'
Making check in data
make[3]: Entering directory `/sources/bison-2.6.2/data'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/data'
Making check in src
make[3]: Entering directory `/sources/bison-2.6.2/src'
make  check-am
make[4]: Entering directory `/sources/bison-2.6.2/src'
make[4]: Nothing to be done for `check-am'.
make[4]: Leaving directory `/sources/bison-2.6.2/src'
make[3]: Leaving directory `/sources/bison-2.6.2/src'
Making check in doc
make[3]: Entering directory `/sources/bison-2.6.2/doc'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/doc'
Making check in examples
make[3]: Entering directory `/sources/bison-2.6.2/examples'
Making check in calc++
make[4]: Entering directory `/sources/bison-2.6.2/examples/calc++'
make  check-am
make[5]: Entering directory `/sources/bison-2.6.2/examples/calc++'
make  calc++
make[6]: Entering directory `/sources/bison-2.6.2/examples/calc++'
  CXX      calc++-scanner.o
  CXX      calc++.o
  CXX      calc++-driver.o
  CXX      calc++-parser.o
  CXXLD    calc++
make[6]: Leaving directory `/sources/bison-2.6.2/examples/calc++'
make  check-TESTS
make[6]: Entering directory `/sources/bison-2.6.2/examples/calc++'
PASS: test
=============
1 test passed
=============
make[6]: Leaving directory `/sources/bison-2.6.2/examples/calc++'
make[5]: Leaving directory `/sources/bison-2.6.2/examples/calc++'
make[4]: Leaving directory `/sources/bison-2.6.2/examples/calc++'
make[4]: Entering directory `/sources/bison-2.6.2/examples'
make[4]: Nothing to be done for `check-am'.
make[4]: Leaving directory `/sources/bison-2.6.2/examples'
make[3]: Leaving directory `/sources/bison-2.6.2/examples'
Making check in tests
make[3]: Entering directory `/sources/bison-2.6.2/tests'
make  bison
make[4]: Entering directory `/sources/bison-2.6.2/tests'
make[4]: `bison' is up to date.
make[4]: Leaving directory `/sources/bison-2.6.2/tests'
make  check-local
make[4]: Entering directory `/sources/bison-2.6.2/tests'
/bin/sh ./testsuite 
## --------------------------- ##
## GNU Bison 2.6.2 test suite. ##
## --------------------------- ##

Input Processing.

  1: Invalid $n and @n                               ok
  2: Type Clashes                                    ok
  3: Unused values                                   ok
  4: Unused values before symbol declarations        ok
  5: Default %printer and %destructor redeclared     ok
  6: Per-type %printer and %destructor redeclared    ok
  7: Unused values with default %destructor          ok
  8: Unused values with per-type %destructor         ok
  9: Incompatible Aliases                            ok
 10: Torturing the Scanner                           ok
 11: Typed symbol aliases                            ok
 12: Require 1.0                                     ok
 13: Require 2.6.2                                   ok
 14: Require 100.0                                   ok
 15: String aliases for character tokens             ok
 16: Symbols                                         ok
 17: Numbered tokens                                 ok
 18: Unclosed constructs                             ok
 19: %start after first rule                         ok
 20: %prec takes a token                             ok
 21: %prec's token must be defined                   ok
 22: Reject unused %code qualifiers                  ok
 23: %define errors                                  ok
 24: %define, --define, --force-define               ok
 25: %define Boolean variables                       ok
 26: %define enum variables                          ok
 27: %define backward compatibility                  ok
 28: Unused %define api.pure                         ok
 29: C++ namespace reference errors                  ok
 30: Bad character literals                          ok
 31: Bad escapes in literals                         ok
 32: LAC: Errors for %define                         ok
 33: -Werror is not affected by -Wnone and -Wall     ok
 34: %name-prefix and %define api.prefix are incompatible ok
 35: Stray $ or @                                    ok
 36: Code injection                                  ok

Named references tests.

 37: Tutorial calculator                             ok
 38: Undefined and ambiguous references              ok
 39: Misleading references                           ok
 40: Many kinds of errors                            ok
 41: Missing identifiers in brackets                 ok
 42: Redundant words in brackets                     ok
 43: Comments in brackets                            ok
 44: Stray symbols in brackets                       ok
 45: Redundant words in LHS brackets                 ok
 46: Factored LHS                                    ok
 47: Unresolved references                           ok
 48: $ or @ followed by . or -                       ok

Output file names.

 49: Output files:  -dv                              ok
 50: Output files:  -dv >&-                          ok
 51: Output files:  -dv -o foo.c                     ok
 52: Output files:  -dv -o foo.tab.c                 ok
 53: Output files:  -dv -y                           ok
 54: Output files:  -dv -b bar                       ok
 55: Output files:  -dv -g -o foo.c                  ok
 56: Output files: %defines %verbose                 ok
 57: Output files: %defines %verbose %yacc           ok
 58: Output files: %defines %verbose %yacc           ok
 59: Output files: %file-prefix "bar" %defines %verbose   ok
 60: Output files: %output="bar.c" %defines %verbose %yacc   ok
 61: Output files: %file-prefix="baz" %output "bar.c" %defines %verbose %yacc   ok
 62: Output files: %defines %verbose                 ok
 63: Output files: %defines %verbose  -o foo.c       ok
 64: Output files:  --defines=foo.hpp -o foo.c++     ok
 65: Output files: %defines "foo.hpp" -o foo.c++     ok
 66: Output files:  -o foo.c++ --graph=foo.gph       ok
 67: Output files: %skeleton "lalr1.cc" %defines %verbose   ok
 68: Output files: %skeleton "lalr1.cc" %defines %verbose   ok
 69: Output files: %skeleton "lalr1.cc" %defines %verbose -o subdir/foo.cc  ok
 70: Output files: %skeleton "lalr1.cc" %defines %verbose %file-prefix "output_dir/foo"   ok
 71: Conflicting output files:  --graph="foo.tab.c"  ok
 72: Conflicting output files: %defines "foo.output" -v ok
 73: Conflicting output files: %skeleton "lalr1.cc" %defines --graph="location.hh" ok
 74: Conflicting output files:  -o foo.y             ok
 75: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
 76: Output file name: (                             ok
 77: Output file name: )                             ok
 78: Output file name: #                             ok
 79: Output file name: @@                            ok
 80: Output file name: @{                            ok
 81: Output file name: @}                            ok
 82: Output file name: [                             ok
 83: Output file name: ]                             ok

Skeleton Support.

 84: Relative skeleton file names                    ok
 85: Installed skeleton file names                   ok
 86: %define Boolean variables: invalid skeleton defaults ok
 87: Complaining during macro argument expansion     ok
 88: Fatal errors make M4 exit immediately           ok
 89: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

 90: Nullable                                        ok
 91: Broken Closure                                  ok
 92: Firsts                                          ok
 93: Accept                                          ok

Grammar Reduction.

 94: Useless Terminals                               ok
 95: Useless Nonterminals                            ok
 96: Useless Rules                                   ok
 97: Reduced Automaton                               ok
 98: Underivable Rules                               ok
 99: Empty Language                                  ok
100: no %define lr.type: Single State Split          ok
101: %define lr.type lalr: Single State Split        ok
102: %define lr.type ielr: Single State Split        ok
103: %define lr.type canonical-lr: Single State Split ok
104: no %define lr.type: Lane Split                  ok
105: %define lr.type lalr: Lane Split                ok
106: %define lr.type ielr: Lane Split                ok
107: %define lr.type canonical-lr: Lane Split        ok
108: no %define lr.type: Complex Lane Split          ok
109: %define lr.type lalr: Complex Lane Split        ok
110: %define lr.type ielr: Complex Lane Split        ok
111: %define lr.type canonical-lr: Complex Lane Split ok
112: no %define lr.type: Split During Added Lookahead Propagation ok
113: %define lr.type lalr: Split During Added Lookahead Propagation ok
114: %define lr.type ielr: Split During Added Lookahead Propagation ok
115: %define lr.type canonical-lr: Split During Added Lookahead Propagation ok
116: no %define lr.default-reductions                ok
117: %define lr.default-reductions most              ok
118: %define lr.default-reductions consistent        ok
119: %define lr.default-reductions accepting         ok

User Actions.

120: Prologue syncline                               ok
121: %union syncline                                 ok
122: Postprologue syncline                           ok
123: Action syncline                                 ok
124: Epilogue syncline                               ok

Parser Headers.

125: Invalid CPP guards:  --defines=input/input.h    ok
126: Invalid CPP guards:  --defines=9foo.h           ok
127: Invalid CPP guards: %glr-parser --defines=input/input.h ok
128: Invalid CPP guards: %glr-parser --defines=9foo.h ok
129: export YYLTYPE                                  ok
130: Several parsers                                 ok

User Actions.

131: Mid-rule actions                                ok
132: Exotic Dollars                                  ok
133: Printers and Destructors :                      ok
134: Printers and Destructors with union:            ok
135: Printers and Destructors : %defines %skeleton "lalr1.cc" ok
136: Printers and Destructors with union: %defines %skeleton "lalr1.cc" ok
137: Printers and Destructors : %glr-parser          ok
138: Printers and Destructors with union: %glr-parser ok
139: Default tagless %printer and %destructor        ok
140: Default tagged and per-type %printer and %destructor ok
141: Default %printer and %destructor for user-defined end token ok
142: Default %printer and %destructor are not for error or $undefined ok
143: Default %printer and %destructor are not for $accept ok
144: Default %printer and %destructor for mid-rule values ok
145: @$ in %initial-action implies %locations        ok
146: @$ in %destructor implies %locations            ok
147: @$ in %printer implies %locations               ok
148: Qualified $$ in actions: yacc.c                 ok
149: Qualified $$ in actions: glr.c                  ok
150: Qualified $$ in actions: lalr1.cc               ok
151: Qualified $$ in actions: glr.cc                 ok
152: Fix user actions without a trailing semicolon   ok
153: Destroying lookahead assigned by semantic action ok
154: YYBACKUP                                        ok

Conflicts.

155: S/R in initial                                  ok
156: %nonassoc and eof                               ok
157: %error-verbose and consistent errors            skipped (conflicts.at:307)
158: LAC: %nonassoc requires splitting canonical LR states ok
159: Unresolved SR Conflicts                         ok
160: Resolved SR Conflicts                           ok
161: Defaulted Conflicted Reduction                  ok
162: %expect not enough                              ok
163: %expect right                                   ok
164: %expect too much                                ok
165: %expect with reduce conflicts                   ok
166: %prec with user string                          ok
167: %no-default-prec without %prec                  ok
168: %no-default-prec with %prec                     ok
169: %default-prec                                   ok
170: Unreachable States After Conflict Resolution    ok
171: Solved conflicts report for multiple reductions in a state ok
172: %nonassoc error actions for multiple reductions in a state ok
173: -W versus %expect and %expect-rr                ok

Simple LALR(1) Calculator.

174: Calculator                                      ok
175: Calculator %defines                             ok
176: Calculator %locations                           ok
177: Calculator %name-prefix="calc"                  ok
178: Calculator %verbose                             ok
179: Calculator %yacc                                ok
180: Calculator %error-verbose                       ok
181: Calculator %define api.pure %locations          ok
182: Calculator %define api.push-pull both %define api.pure %locations ok
183: Calculator %error-verbose %locations            ok
184: Calculator %error-verbose %locations %defines %name-prefix "calc" %verbose %yacc ok
185: Calculator %error-verbose %locations %defines %define api.prefix "calc" %verbose %yacc ok
186: Calculator %debug                               ok
187: Calculator %error-verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
188: Calculator %error-verbose %debug %locations %defines %define api.prefix "calc" %verbose %yacc ok
189: Calculator %define api.pure %error-verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
190: Calculator %define api.push-pull both %define api.pure %error-verbose %debug %locations %defines %define api.prefix "calc" %verbose %yacc ok
191: Calculator %define api.pure %error-verbose %debug %locations %defines %define api.prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple GLR Calculator.

192: Calculator %glr-parser                          ok
193: Calculator %glr-parser %defines                 ok
194: Calculator %glr-parser %locations               ok
195: Calculator %glr-parser %name-prefix "calc"      ok
196: Calculator %glr-parser %define api.prefix "calc" ok
197: Calculator %glr-parser %verbose                 ok
198: Calculator %glr-parser %yacc                    ok
199: Calculator %glr-parser %error-verbose           ok
200: Calculator %glr-parser %define api.pure %locations ok
201: Calculator %glr-parser %error-verbose %locations ok
202: Calculator %glr-parser %error-verbose %locations %defines %name-prefix "calc" %verbose %yacc ok
203: Calculator %glr-parser %debug                   ok
204: Calculator %glr-parser %error-verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
205: Calculator %glr-parser %error-verbose %debug %locations %defines %define api.prefix "calc" %verbose %yacc ok
206: Calculator %glr-parser %define api.pure %error-verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
207: Calculator %glr-parser %define api.pure %error-verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
208: Calculator %glr-parser %define api.pure %error-verbose %debug %locations %defines %define api.prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple LALR(1) C++ Calculator.

209: Calculator %skeleton "lalr1.cc" %defines %locations ok
210: Calculator %language "C++" %defines %locations  ok
211: Calculator %language "C++" %defines %locations %define location_type Span ok
212: Calculator %language "C++" %defines %locations %error-verbose %name-prefix "calc" %verbose %yacc ok
213: Calculator %language "C++" %defines %locations %error-verbose %define api.prefix "calc" %verbose %yacc ok
214: Calculator %language "C++" %defines %locations %error-verbose %debug %name-prefix "calc" %verbose %yacc ok
215: Calculator %language "C++" %defines %locations %pure-parser %error-verbose %debug %define api.prefix "calc" %verbose %yacc ok
216: Calculator %language "C++" %defines %locations %pure-parser %error-verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
217: Calculator %language "C++" %defines %locations %pure-parser %error-verbose %debug %define api.prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple GLR C++ Calculator.

218: Calculator %skeleton "glr.cc" %defines %locations ok
219: Calculator %language "C++" %glr-parser %defines %locations  ok
220: Calculator %language "C++" %glr-parser %defines %locations %define location_type Span ok
221: Calculator %language "C++" %glr-parser %defines %locations %error-verbose %name-prefix "calc" %verbose %yacc ok
222: Calculator %language "C++" %glr-parser %defines %locations %error-verbose %define api.prefix "calc" %verbose %yacc ok
223: Calculator %language "C++" %glr-parser %defines %locations %debug ok
224: Calculator %language "C++" %glr-parser %defines %locations %error-verbose %debug %name-prefix "calc" %verbose %yacc ok
225: Calculator %language "C++" %glr-parser %defines %locations %pure-parser %error-verbose %debug %name-prefix "calc" %verbose %yacc ok
226: Calculator %language "C++" %glr-parser %defines %locations %pure-parser %error-verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
227: Calculator %language "C++" %glr-parser %defines %locations %pure-parser %error-verbose %debug %define api.prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Torture Tests.

228: Big triangle                                    ok
229: Big horizontal                                  ok
230: Many lookahead tokens                           ok
231: Exploding the Stack Size with Alloca            ok
232: Exploding the Stack Size with Malloc            ok

Existing Grammars.

233: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
234: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
235: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
236: GNU Cim Grammar: LALR(1)                        ok
237: GNU Cim Grammar: IELR(1)                        ok
238: GNU Cim Grammar: Canonical LR(1)                ok
239: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
240: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
241: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

242: Trivial grammars                                ok
243: YYSTYPE typedef                                 ok
244: Early token definitions with --yacc             ok
245: Early token definitions without --yacc          ok
246: Braces parsing                                  ok
247: Duplicate string                                ok
248: Rule Line Numbers                               ok
249: Mixing %token styles                            ok
250: Invalid inputs                                  ok
251: Invalid inputs with {}                          ok
252: Token definitions                               ok
253: Characters Escapes                              ok
254: Web2c Report                                    ok
255: Web2c Actions                                   ok
256: Dancer                                          ok
257: Dancer %glr-parser                              ok
258: Dancer %skeleton "lalr1.cc"                     ok
259: Expecting two tokens                            ok
260: Expecting two tokens %glr-parser                ok
261: Expecting two tokens %skeleton "lalr1.cc"       ok
262: Braced code in declaration in rules section     ok
263: String alias declared after use                 ok
264: Extra lookahead sets in report                  ok
265: Token number in precedence declaration          ok
266: parse-gram.y: LALR = IELR                       ok
267: %error-verbose and YYSTACK_USE_ALLOCA           ok
268: %error-verbose overflow                         ok
269: LAC: Exploratory stack                          ok
270: LAC: Memory exhaustion                          ok
271: Lex and parse params: "yacc.c"                  ok
272: Lex and parse params: "glr.c"                   ok
273: Lex and parse params: "lalr1.cc"                ok
274: Lex and parse params: "glr.cc"                  ok

C++ Features.

275: Doxygen Public Documentation                    skipped (c++.at:102)
276: Doxygen Private Documentation                   skipped (c++.at:103)
277: Relative namespace references                   ok
278: Absolute namespace references                   ok
279: Syntactically invalid namespace references      ok

Java Calculator.

280: Calculator                                      skipped (java.at:360)
281: Calculator %error-verbose                       skipped (java.at:360)
282: Calculator %locations                           skipped (java.at:360)
283: Calculator %error-verbose %locations            skipped (java.at:360)
284: Calculator %lex-param { InputStream is }        skipped (java.at:369)
285: Calculator %error-verbose %lex-param { InputStream is }  skipped (java.at:369)
286: Calculator %locations %lex-param { InputStream is }  skipped (java.at:369)
287: Calculator %error-verbose %locations %lex-param { InputStream is }  skipped (java.at:369)

Java Parameters.

288: Java parser class and package names             skipped (java.at:457)
289: Java parser class modifiers                     skipped (java.at:478)
290: Java parser class extends and implements        skipped (java.at:536)
291: Java %parse-param and %lex-param                skipped (java.at:556)
292: Java throws specifications                      skipped (java.at:688)
293: Java stype, position_class and location_class   skipped (java.at:719)
294: Java syntax error handling without error token  skipped (java.at:800)

C++ Type Syntax (GLR).

295: GLR: Resolve ambiguity, impure, no locations    ok
296: GLR: Resolve ambiguity, impure, locations       ok
297: GLR: Resolve ambiguity, pure, no locations      ok
298: GLR: Resolve ambiguity, pure, locations         ok
299: GLR: Merge conflicting parses, impure, no locations ok
300: GLR: Merge conflicting parses, impure, locations ok
301: GLR: Merge conflicting parses, pure, no locations ok
302: GLR: Merge conflicting parses, pure, locations  ok
303: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

304: Badly Collapsed GLR States                      ok
305: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
306: Improper merging of GLR delayed action sets     ok
307: Duplicate representation of merged trees        ok
308: User destructor for unresolved GLR semantic value ok
309: User destructor after an error during a split parse ok
310: Duplicated user destructor for lookahead        ok
311: Incorrectly initialized location for empty right-hand side in GLR ok
312: No users destructors if stack 0 deleted         ok
313: Corrupted semantic options if user action cuts parse ok
314: Undesirable destructors if user action cuts parse ok
315: Leaked semantic values if user action cuts parse ok
316: Incorrect lookahead during deterministic GLR    ok
317: Incorrect lookahead during nondeterministic GLR ok
318: Leaked semantic values when reporting ambiguity ok
319: Leaked lookahead after nondeterministic parse syntax error ok
320: Uninitialized location when reporting ambiguity ok
321: Missed %merge type warnings when LHS type is declared later ok
322: Ambiguity reports                               ok

Push Parsing Tests

323: Memory Leak for Early Deletion                  ok
324: Multiple impure instances                       ok
325: Unsupported Skeletons                           ok

## ------------- ##
## Test results. ##
## ------------- ##

307 tests were successful.
18 tests were skipped.
make[4]: Leaving directory `/sources/bison-2.6.2/tests'
make[3]: Leaving directory `/sources/bison-2.6.2/tests'
Making check in etc
make[3]: Entering directory `/sources/bison-2.6.2/etc'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-2.6.2/etc'
make[3]: Entering directory `/sources/bison-2.6.2'
make[3]: Nothing to be done for `check-am'.
make[3]: Leaving directory `/sources/bison-2.6.2'
make[2]: Leaving directory `/sources/bison-2.6.2'
make[1]: Leaving directory `/sources/bison-2.6.2'
