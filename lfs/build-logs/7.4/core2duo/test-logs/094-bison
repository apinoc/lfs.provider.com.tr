Fri Aug 30 18:39:46 GMT 2013
make[1]: Entering directory `/sources/bison-3.0'
  GEN      public-submodule-commit
make  check-recursive
make[2]: Entering directory `/sources/bison-3.0'
Making check in po
make[3]: Entering directory `/sources/bison-3.0/po'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-3.0/po'
Making check in runtime-po
make[3]: Entering directory `/sources/bison-3.0/runtime-po'
make[3]: Nothing to be done for `check'.
make[3]: Leaving directory `/sources/bison-3.0/runtime-po'
Making check in .
make[3]: Entering directory `/sources/bison-3.0'
  GEN      doc/bison.help
make  examples/calc++/calc++ examples/mfcalc/mfcalc examples/rpcalc/rpcalc ./tests/bison tests/atconfig tests/atlocal
make[4]: Entering directory `/sources/bison-3.0'
  YACC     examples/calc++/calc++-parser.stamp
  CXX      examples/calc++/examples_calc___calc__-calc++-driver.o
  LEX      examples/calc++/calc++-scanner.cc
  CXX      examples/calc++/examples_calc___calc__-calc++-scanner.o
  CXX      examples/calc++/examples_calc___calc__-calc++.o
  CXX      examples/calc++/examples_calc___calc__-calc++-parser.o
  CXXLD    examples/calc++/calc++
  YACC     examples/mfcalc/mfcalc.c
updating examples/mfcalc/mfcalc.output
updating examples/mfcalc/mfcalc.h
  CC       examples/mfcalc/examples_mfcalc_mfcalc-mfcalc.o
  CCLD     examples/mfcalc/mfcalc
  YACC     examples/rpcalc/rpcalc.c
updating examples/rpcalc/rpcalc.output
updating examples/rpcalc/rpcalc.h
  CC       examples/rpcalc/examples_rpcalc_rpcalc-rpcalc.o
  CCLD     examples/rpcalc/rpcalc
make[4]: `tests/bison' is up to date.
make[4]: Nothing to be done for `tests/atconfig'.
make[4]: `tests/atlocal' is up to date.
make[4]: Leaving directory `/sources/bison-3.0'
make  check-TESTS check-local
make[4]: Entering directory `/sources/bison-3.0'
make[5]: Entering directory `/sources/bison-3.0'
PASS: examples/calc++/calc++.test
PASS: examples/mfcalc/mfcalc.test
PASS: examples/rpcalc/rpcalc.test
make[6]: Entering directory `/sources/bison-3.0'
make  all-recursive
make[7]: Entering directory `/sources/bison-3.0'
Making all in po
make[8]: Entering directory `/sources/bison-3.0/po'
make[8]: Nothing to be done for `all'.
make[8]: Leaving directory `/sources/bison-3.0/po'
Making all in runtime-po
make[8]: Entering directory `/sources/bison-3.0/runtime-po'
make[8]: Nothing to be done for `all'.
make[8]: Leaving directory `/sources/bison-3.0/runtime-po'
Making all in .
make[8]: Entering directory `/sources/bison-3.0'
  GEN      doc/bison.help
make[8]: Leaving directory `/sources/bison-3.0'
make[7]: Leaving directory `/sources/bison-3.0'
make[6]: Leaving directory `/sources/bison-3.0'
============================================================================
Testsuite summary for GNU Bison 3.0
============================================================================
# TOTAL: 3
# PASS:  3
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[5]: Leaving directory `/sources/bison-3.0'
./tests/testsuite -C tests 
actions.at
atconfig
atlocal
atlocal.in
bison
bison.in
c++.at
calc.at
conflicts.at
conftest.cc
cxx-type.at
existing.at
glr-regression.at
headers.at
input.at
java.at
javapush.at
local.at
local.mk
named-refs.at
output.at
package.m4
push.at
reduce.at
regression.at
sets.at
skeletons.at
synclines.at
testsuite
testsuite.at
torture.at
types.at
## ------------------------- ##
## GNU Bison 3.0 test suite. ##
## ------------------------- ##

Input Processing.

  1: Invalid options                                 ok
  2: Invalid inputs                                  ok
  3: Invalid inputs with {}                          ok
  4: Invalid $n and @n                               ok
  5: Type Clashes                                    ok
  6: Unused values                                   ok
  7: Unused values before symbol declarations        ok
  8: Default %printer and %destructor redeclared     ok
  9: Per-type %printer and %destructor redeclared    ok
 10: Undefined symbols                               ok
 11: Unassociated types used for a printer or destructor ok
 12: Useless printers or destructors                 ok
 13: Unused values with default %destructor          ok
 14: Unused values with per-type %destructor         ok
 15: Incompatible Aliases                            ok
 16: Torturing the Scanner                           ok
 17: Typed symbol aliases                            ok
 18: Require 1.0                                     ok
 19: Require 3.0                                     ok
 20: Require 100.0                                   ok
 21: String aliases for character tokens             ok
 22: Symbols                                         ok
 23: Numbered tokens                                 ok
 24: Unclosed constructs                             ok
 25: %start after first rule                         ok
 26: %prec takes a token                             ok
 27: %prec's token must be defined                   ok
 28: Reject unused %code qualifiers                  ok
 29: Multiple %code                                  ok
 30: errors                                          ok
 31: %define, --define, --force-define               ok
 32: "%define" Boolean variables                     ok
 33: "%define" code variables                        ok
 34: "%define" keyword variables                     ok
 35: "%define" enum variables                        ok
 36: "%define" backward compatibility                ok
 37: Unused api.pure                                 ok
 38: C++ namespace reference errors                  ok
 39: Bad character literals                          ok
 40: Bad escapes in literals                         ok
 41: LAC: Errors for %define                         ok
 42: -Werror is not affected by -Wnone and -Wall     ok
 43: %name-prefix and api.prefix are incompatible    ok
 44: Stray $ or @                                    ok
 45: Code injection                                  ok
 46: Deprecated directives                           ok
 47: Unput's effect on locations                     ok
 48: Non-deprecated directives                       ok

Named references tests.

 49: Tutorial calculator                             ok
 50: Undefined and ambiguous references              ok
 51: Misleading references                           ok
 52: Many kinds of errors                            ok
 53: Missing identifiers in brackets                 ok
 54: Redundant words in brackets                     ok
 55: Comments in brackets                            ok
 56: Stray symbols in brackets                       ok
 57: Redundant words in LHS brackets                 ok
 58: Factored LHS                                    ok
 59: Unresolved references                           ok
 60: $ or @ followed by . or -                       ok

Output file names.

 61: Output files:  -dv                              ok
 62: Output files:  -dv >&-                          ok
 63: Output files:  -dv -o foo.c                     ok
 64: Output files:  -dv -o foo.tab.c                 ok
 65: Output files:  -dv -g --xml -y                  ok
 66: Output files:  -dv -g --xml -o y.tab.c          ok
 67: Output files:  -dv -b bar                       ok
 68: Output files:  -dv -g -o foo.c                  ok
 69: Output files: %defines %verbose                 ok
 70: Output files: %defines %verbose %yacc           ok
 71: Output files: %defines %verbose %yacc           ok
 72: Output files: %file-prefix "bar" %defines %verbose   ok
 73: Output files: %output "bar.c" %defines %verbose %yacc   ok
 74: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc   ok
 75: Output files: %defines %verbose                 ok
 76: Output files: %defines %verbose  -o foo.c       ok
 77: Output files:  --defines=foo.hpp -o foo.c++     ok
 78: Output files: %defines "foo.hpp" -o foo.c++     ok
 79: Output files:  -o foo.c++ --graph=foo.gph       ok
 80: Output files: lalr1.cc %verbose                 ok
 81: Output files: lalr1.cc %defines %verbose        ok
 82: Output files: lalr1.cc %verbose %locations      ok
 83: Output files: lalr1.cc %defines %verbose %locations   ok
 84: Output files: lalr1.cc %defines %verbose        ok
 85: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc  ok
 86: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"   ok
 87: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"   ok
 88: Conflicting output files:  --graph="foo.tab.c"  ok
 89: Conflicting output files: %defines "foo.output" -v ok
 90: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
 91: Conflicting output files:  -o foo.y             ok
 92: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
 93: Output file name: (                             ok
 94: Output file name: )                             ok
 95: Output file name: #                             ok
 96: Output file name: @@                            ok
 97: Output file name: @{                            ok
 98: Output file name: @}                            ok
 99: Output file name: [                             ok
100: Output file name: ]                             ok
101: Graph with no conflicts                         ok
102: Graph with unsolved S/R                         ok
103: Graph with solved S/R                           ok
104: Graph with R/R                                  ok
105: Graph with reductions with multiple LAT         ok
106: Graph with a reduction rule both enabled and disabled ok

Skeleton Support.

107: Relative skeleton file names                    ok
108: Installed skeleton file names                   ok
109: Boolean=variables: invalid skeleton defaults    ok
110: Complaining during macro argument expansion     ok
111: Fatal errors make M4 exit immediately           ok
112: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

113: Nullable                                        ok
114: Broken Closure                                  ok
115: Firsts                                          ok
116: Accept                                          ok

Grammar Reduction.

117: Useless Terminals                               ok
118: Useless Nonterminals                            ok
119: Useless Rules                                   ok
120: Reduced Automaton                               ok
121: Underivable Rules                               ok
122: Empty Language                                  ok
123: no lr.type: Single State Split                  ok
124: lr.type=lalr: Single State Split                ok
125: lr.type=ielr: Single State Split                ok
126: lr.type=canonical-lr: Single State Split        ok
127: no lr.type: Lane Split                          ok
128: lr.type=lalr: Lane Split                        ok
129: lr.type=ielr: Lane Split                        ok
130: lr.type=canonical-lr: Lane Split                ok
131: no lr.type: Complex Lane Split                  ok
132: lr.type=lalr: Complex Lane Split                ok
133: lr.type=ielr: Complex Lane Split                ok
134: lr.type=canonical-lr: Complex Lane Split        ok
135: no lr.type: Split During Added Lookahead Propagation ok
136: lr.type=lalr: Split During Added Lookahead Propagation ok
137: lr.type=ielr: Split During Added Lookahead Propagation ok
138: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
139: no lr.default-reduction                         ok
140: lr.default-reduction=most                       ok
141: lr.default-reduction=consistent                 ok
142: lr.default-reduction=accepting                  ok

Conflicts.

143: Token declaration order                         ok
144: Token declaration order: literals vs. identifiers ok
145: Useless associativity warning                   ok
146: Useless precedence warning                      ok
147: S/R in initial                                  ok
148: %nonassoc and eof                               ok
149: parse.error=verbose and consistent errors       skipped (conflicts.at:532)
150: LAC: %nonassoc requires splitting canonical LR states ok
151: Unresolved SR Conflicts                         ok
152: Resolved SR Conflicts                           ok
153: %precedence suffices                            ok
154: %precedence does not suffice                    ok
155: Defaulted Conflicted Reduction                  ok
156: %expect not enough                              ok
157: %expect right                                   ok
158: %expect too much                                ok
159: %expect with reduce conflicts                   ok
160: %prec with user string                          ok
161: %no-default-prec without %prec                  ok
162: %no-default-prec with %prec                     ok
163: %default-prec                                   ok
164: Unreachable States After Conflict Resolution    ok
165: Solved conflicts report for multiple reductions in a state ok
166: %nonassoc error actions for multiple reductions in a state ok
167: %expect-rr non GLR                              ok
168: -W versus %expect and %expect-rr                ok

User Actions.

169: Prologue syncline                               ok
170: %union syncline                                 ok
171: Postprologue syncline                           ok
172: Action syncline                                 ok
173: Epilogue syncline                               ok
174: %code top syncline                              ok
175: %no-lines: yacc.c                               ok
176: %no-lines: glr.c                                ok
177: %no-lines: lalr1.cc                             ok
178: %no-lines: glr.cc                               ok

Parser Headers.

179: Invalid CPP guards:  --defines=input/input.h    ok
180: Invalid CPP guards:  --defines=9foo.h           ok
181: Invalid CPP guards: %glr-parser --defines=input/input.h ok
182: Invalid CPP guards: %glr-parser --defines=9foo.h ok
183: export YYLTYPE                                  ok
184: Several parsers                                 ok

User Actions.

185: Mid-rule actions                                ok
186: Implicitly empty rule                           ok
187: Invalid uses of %empty                          ok
188: Valid uses of %empty                            ok
189: Initial location: yacc.c                        ok
190: Initial location: yacc.c api.pure=full          ok
191: Initial location: yacc.c api.pure %parse-param { int x } ok
192: Initial location: yacc.c api.push-pull=both     ok
193: Initial location: yacc.c api.push-pull=both api.pure=full ok
194: Initial location: glr.c                         ok
195: Initial location: glr.c api.pure                ok
196: Initial location: lalr1.cc                      ok
197: Initial location: glr.cc                        ok
198: Initial location: yacc.c api.pure=full          ok
199: Initial location: yacc.c api.pure=full          ok
200: Location print: yacc.c                          ok
201: Location print: glr.c                           ok
202: Location print: lalr1.cc                        ok
203: Location print: glr.cc                          ok
204: Exotic Dollars                                  ok
205: Printers and Destructors                        ok
206: Printers and Destructors with union             ok
207: Printers and Destructors: %defines lalr1.cc     ok
208: Printers and Destructors with union: %defines lalr1.cc ok
209: Printers and Destructors: %glr-parser           ok
210: Printers and Destructors with union: %glr-parser ok
211: Default tagless %printer and %destructor        ok
212: Default tagged and per-type %printer and %destructor ok
213: Default %printer and %destructor for user-defined end token ok
214: Default %printer and %destructor are not for error or $undefined ok
215: Default %printer and %destructor are not for $accept ok
216: Default %printer and %destructor for mid-rule values ok
217: @$ in %initial-action implies %locations        ok
218: @$ in %destructor implies %locations            ok
219: @$ in %printer implies %locations               ok
220: Qualified $$ in actions: yacc.c                 ok
221: Qualified $$ in actions: glr.c                  ok
222: Qualified $$ in actions: lalr1.cc               ok
223: Qualified $$ in actions: glr.cc                 ok
224: Destroying lookahead assigned by semantic action ok
225: YYBACKUP                                        ok

Value type tests.

226: %union vs. api.value.type                       ok
227: %yacc vs. api.value.type=union                  ok
228: yacc.c api.value.type={double}                  ok
229: yacc.c api.value.type={variant}                 ok
230: yacc.c api.value.type={struct foo}              ok
231: yacc.c api.value.type={struct bar}              ok
232: yacc.c api.value.type={union foo}               ok
233: yacc.c %union { float fval; int ival; };        ok
234: yacc.c api.value.type=union                     ok
235: glr.c api.value.type={double}                   ok
236: glr.c api.value.type={variant}                  ok
237: glr.c api.value.type={struct foo}               ok
238: glr.c api.value.type={struct bar}               ok
239: glr.c api.value.type={union foo}                ok
240: glr.c %union { float fval; int ival; };         ok
241: glr.c api.value.type=union                      ok
242: lalr1.cc api.value.type={double}                ok
243: lalr1.cc api.value.type={variant}               ok
244: lalr1.cc api.value.type={struct foo}            ok
245: lalr1.cc api.value.type={struct bar}            ok
246: lalr1.cc api.value.type={union foo}             ok
247: lalr1.cc %union { float fval; int ival; };      ok
248: lalr1.cc api.value.type=union                   ok
249: lalr1.cc api.value.type=variant                 ok
250: glr.cc api.value.type={double}                  ok
251: glr.cc api.value.type={variant}                 ok
252: glr.cc api.value.type={struct foo}              ok
253: glr.cc api.value.type={struct bar}              ok
254: glr.cc api.value.type={union foo}               ok
255: glr.cc %union { float fval; int ival; };        ok
256: glr.cc api.value.type=union                     ok

Simple LALR(1) Calculator.

257: Calculator                                      ok
258: Calculator %defines                             ok
259: Calculator %locations                           ok
260: Calculator %name-prefix "calc"                  ok
261: Calculator %verbose                             ok
262: Calculator %yacc                                ok
263: Calculator parse.error=verbose                  ok
264: Calculator api.pure=full %locations             ok
265: Calculator api.push-pull=both api.pure=full %locations ok
266: Calculator parse.error=verbose %locations       ok
267: Calculator parse.error=verbose %locations %defines api.prefix={calc} %verbose %yacc ok
268: Calculator parse.error=verbose %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc ok
269: Calculator %debug                               ok
270: Calculator parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
271: Calculator parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc ok
272: Calculator api.pure=full parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
273: Calculator api.push-pull=both api.pure=full parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc ok
274: Calculator api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple GLR Calculator.

275: Calculator %glr-parser                          ok
276: Calculator %glr-parser %defines                 ok
277: Calculator %glr-parser %locations               ok
278: Calculator %glr-parser %name-prefix "calc"      ok
279: Calculator %glr-parser api.prefix={calc}        ok
280: Calculator %glr-parser %verbose                 ok
281: Calculator %glr-parser %yacc                    ok
282: Calculator %glr-parser parse.error=verbose      ok
283: Calculator %glr-parser api.pure %locations      ok
284: Calculator %glr-parser parse.error=verbose %locations ok
285: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose %yacc ok
286: Calculator %glr-parser %debug                   ok
287: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
288: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc ok
289: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc ok
290: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
291: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple LALR(1) C++ Calculator.

292: Calculator lalr1.cc %defines                    ok
293: Calculator C++                                  ok
294: Calculator C++ %locations                       ok
295: Calculator C++ %locations api.location.type={Span} ok
296: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose %yacc ok
297: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose %yacc ok
298: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc ok
299: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc ok
300: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc ok
301: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
302: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
303: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Simple GLR C++ Calculator.

304: Calculator glr.cc                               ok
305: Calculator C++ %glr-parser                      ok
306: Calculator C++ %glr-parser %locations           ok
307: Calculator C++ %glr-parser %locations api.location.type={Span} ok
308: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose %yacc ok
309: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose %yacc ok
310: Calculator C++ %glr-parser %debug               ok
311: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose %yacc ok
312: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc ok
313: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok
314: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count} ok

Torture Tests.

315: Big triangle                                    ok
316: Big horizontal                                  ok
317: Many lookahead tokens                           ok
318: Exploding the Stack Size with Alloca            ok
319: Exploding the Stack Size with Malloc            ok

Existing Grammars.

320: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
321: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
322: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
323: GNU Cim Grammar: LALR(1)                        ok
324: GNU Cim Grammar: IELR(1)                        ok
325: GNU Cim Grammar: Canonical LR(1)                ok
326: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
327: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
328: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

329: Trivial grammars                                ok
330: YYSTYPE typedef                                 ok
331: Early token definitions with --yacc             ok
332: Early token definitions without --yacc          ok
333: Braces parsing                                  ok
334: Duplicate string                                ok
335: Rule Line Numbers                               ok
336: Mixing %token styles                            ok
337: Invalid inputs                                  ok
338: Invalid inputs with {}                          ok
339: Token definitions                               ok
340: Characters Escapes                              ok
341: Web2c Report                                    ok
342: Web2c Actions                                   ok
343: Dancer                                          ok
344: Dancer %glr-parser                              ok
345: Dancer lalr1.cc                                 ok
346: Expecting two tokens                            ok
347: Expecting two tokens %glr-parser                ok
348: Expecting two tokens lalr1.cc                   ok
349: Braced code in declaration in rules section     ok
350: String alias declared after use                 ok
351: Extra lookahead sets in report                  ok
352: Token number in precedence declaration          ok
353: parse-gram.y: LALR = IELR                       ok
354: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
355: parse.error=verbose overflow                    ok
356: LAC: Exploratory stack                          ok
357: LAC: Memory exhaustion                          ok
358: Lex and parse params: yacc.c                    ok
359: Lex and parse params: glr.c                     ok
360: Lex and parse params: lalr1.cc                  ok
361: Lex and parse params: glr.cc                    ok
362: stdio.h is not needed                           ok

Push Parsing Tests

363: Memory Leak for Early Deletion                  ok
364: Multiple impure instances                       ok
365: Unsupported Skeletons                           ok

C++ Features.

366: C++ Locations                                   ok
367: C++ Variant-based Symbols                       ok
368: Variants                                        ok
369: Variants parse.assert                           ok
370: Variants %locations parse.assert                ok
371: Variants parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
372: Variants parse.assert api.token.constructor     ok
373: Variants parse.assert api.token.constructor api.token.prefix={TOK_} ok
374: Variants %locations parse.assert api.token.constructor api.token.prefix={TOK_} ok
375: Doxygen Public Documentation                    skipped (c++.at:412)
376: Doxygen Private Documentation                   skipped (c++.at:413)
377: Relative namespace references                   ok
378: Absolute namespace references                   ok
379: Syntactically invalid namespace references      ok
380: Syntax error discarding no lookahead            ok
381: Syntax error as exception                       ok
382: Exception safety                                ok
383: Exception safety api.value.type=variant         ok
384: C++ GLR parser identifier shadowing             ok

Java Calculator.

385: Calculator                                      skipped (java.at:360)
386: Calculator %error-verbose                       skipped (java.at:360)
387: Calculator %locations                           skipped (java.at:360)
388: Calculator %error-verbose %locations            skipped (java.at:360)
389: Calculator %lex-param { InputStream is }        skipped (java.at:369)
390: Calculator %error-verbose %lex-param { InputStream is }  skipped (java.at:369)
391: Calculator %locations %lex-param { InputStream is }  skipped (java.at:369)
392: Calculator %error-verbose %locations %lex-param { InputStream is }  skipped (java.at:369)

Java Parameters.

393: Java parser class and package names             skipped (java.at:457)
394: Java parser class modifiers                     skipped (java.at:481)
395: Java parser class extends and implements        skipped (java.at:545)
396: Java %parse-param and %lex-param                skipped (java.at:565)
397: Java throws specifications                      skipped (java.at:697)
398: Java constructor init and init_throws           skipped (java.at:728)
399: Java value, position, and location types        skipped (java.at:750)
400: Java syntax error handling without error token  skipped (java.at:831)

Java Push Parsing Tests

401: Trivial Push Parser with api.push-pull verification skipped (javapush.at:203)
402: Trivial Push Parser with %initial-action        skipped (javapush.at:225)
403: Calc parser with api.push-pull both             skipped (javapush.at:580)
404: Calc parser with %locations %code lexer and api.push-pull both skipped (javapush.at:852)

C++ Type Syntax (GLR).

405: GLR: Resolve ambiguity, impure, no locations    ok
406: GLR: Resolve ambiguity, impure, locations       ok
407: GLR: Resolve ambiguity, pure, no locations      ok
408: GLR: Resolve ambiguity, pure, locations         ok
409: GLR: Merge conflicting parses, impure, no locations ok
410: GLR: Merge conflicting parses, impure, locations ok
411: GLR: Merge conflicting parses, pure, no locations ok
412: GLR: Merge conflicting parses, pure, locations  ok
413: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

414: Badly Collapsed GLR States                      ok
415: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
416: Improper merging of GLR delayed action sets     ok
417: Duplicate representation of merged trees        ok
418: User destructor for unresolved GLR semantic value ok
419: User destructor after an error during a split parse ok
420: Duplicated user destructor for lookahead        ok
421: Incorrectly initialized location for empty right-hand side in GLR ok
422: No users destructors if stack 0 deleted         ok
423: Corrupted semantic options if user action cuts parse ok
424: Undesirable destructors if user action cuts parse ok
425: Leaked semantic values if user action cuts parse ok
426: Incorrect lookahead during deterministic GLR    ok
427: Incorrect lookahead during nondeterministic GLR ok
428: Leaked semantic values when reporting ambiguity ok
429: Leaked lookahead after nondeterministic parse syntax error ok
430: Uninitialized location when reporting ambiguity ok
431: Missed %merge type warnings when LHS type is declared later ok
432: Ambiguity reports                               ok

## ------------- ##
## Test results. ##
## ------------- ##

409 tests were successful.
23 tests were skipped.
make[4]: Leaving directory `/sources/bison-3.0'
make[3]: Leaving directory `/sources/bison-3.0'
make[2]: Leaving directory `/sources/bison-3.0'
make[1]: Leaving directory `/sources/bison-3.0'
