Sun Aug 16 14:07:31 CDT 2020
make[1]: Entering directory '/sources/bison-3.7.1'
  GEN      public-submodule-commit
make  check-recursive
make[2]: Entering directory '/sources/bison-3.7.1'
Making check in po
make[3]: Entering directory '/sources/bison-3.7.1/po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.1/po'
Making check in runtime-po
make[3]: Entering directory '/sources/bison-3.7.1/runtime-po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.1/runtime-po'
Making check in gnulib-po
make[3]: Entering directory '/sources/bison-3.7.1/gnulib-po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.1/gnulib-po'
Making check in .
make[3]: Entering directory '/sources/bison-3.7.1'
  GEN      doc/bison.help
make  examples/c/bistromathic/bistromathic examples/c/calc/calc examples/c/lexcalc/lexcalc examples/c/mfcalc/mfcalc examples/c/pushcalc/calc examples/c/reccalc/reccalc examples/c/rpcalc/rpcalc examples/c++/calc++/calc++ examples/c++/simple examples/c++/variant examples/c++/variant-11   ./tests/bison tests/atconfig tests/atlocal
make[4]: Entering directory '/sources/bison-3.7.1'
  YACC     examples/c/bistromathic/parse.c
updating examples/c/bistromathic/parse.output
updating examples/c/bistromathic/parse.h
  CC       examples/c/bistromathic/bistromathic-parse.o
  CCLD     examples/c/bistromathic/bistromathic
  YACC     examples/c/calc/calc.c
updating examples/c/calc/calc.output
updating examples/c/calc/calc.h
  CC       examples/c/calc/examples_c_calc_calc-calc.o
  CCLD     examples/c/calc/calc
  YACC     examples/c/lexcalc/parse.c
updating examples/c/lexcalc/parse.output
updating examples/c/lexcalc/parse.h
  CC       examples/c/lexcalc/examples_c_lexcalc_lexcalc-parse.o
  LEX      examples/c/lexcalc/scan.c
  CC       examples/c/lexcalc/examples_c_lexcalc_lexcalc-scan.o
  CCLD     examples/c/lexcalc/lexcalc
  YACC     examples/c/mfcalc/mfcalc.c
updating examples/c/mfcalc/mfcalc.output
updating examples/c/mfcalc/mfcalc.h
  CC       examples/c/mfcalc/examples_c_mfcalc_mfcalc-mfcalc.o
  CCLD     examples/c/mfcalc/mfcalc
  YACC     examples/c/pushcalc/calc.c
updating examples/c/pushcalc/calc.output
updating examples/c/pushcalc/calc.h
  CC       examples/c/pushcalc/examples_c_pushcalc_calc-calc.o
  CCLD     examples/c/pushcalc/calc
  YACC     examples/c/reccalc/parse.c
updating examples/c/reccalc/parse.output
updating examples/c/reccalc/parse.h
  CC       examples/c/reccalc/examples_c_reccalc_reccalc-parse.o
  CC       examples/c/reccalc/examples_c_reccalc_reccalc-scan.o
  CCLD     examples/c/reccalc/reccalc
  YACC     examples/c/rpcalc/rpcalc.c
updating examples/c/rpcalc/rpcalc.output
updating examples/c/rpcalc/rpcalc.h
  CC       examples/c/rpcalc/examples_c_rpcalc_rpcalc-rpcalc.o
  CCLD     examples/c/rpcalc/rpcalc
  YACC     examples/c++/calc++/parser.stamp
  CXX      examples/c++/calc++/calc__-driver.o
  LEX      examples/c++/calc++/scanner.cc
  CXX      examples/c++/calc++/calc__-scanner.o
  CXX      examples/c++/calc++/calc__-calc++.o
  CXX      examples/c++/calc++/calc__-parser.o
  CXXLD    examples/c++/calc++/calc++
  YACC     examples/c++/simple.cc
updating examples/c++/simple.output
updating examples/c++/simple.hh
  CXX      examples/c++/simple-simple.o
  CXXLD    examples/c++/simple
  YACC     examples/c++/variant.cc
updating examples/c++/variant.output
updating examples/c++/variant.hh
  CXX      examples/c++/variant-variant.o
  CXXLD    examples/c++/variant
  YACC     examples/c++/variant-11.cc
updating examples/c++/variant-11.output
updating examples/c++/variant-11.hh
  CXX      examples/c++/variant_11-variant-11.o
  CXXLD    examples/c++/variant-11
make[4]: 'tests/bison' is up to date.
make[4]: Nothing to be done for 'tests/atconfig'.
make[4]: 'tests/atlocal' is up to date.
make[4]: Leaving directory '/sources/bison-3.7.1'
make  check-TESTS check-local
make[4]: Entering directory '/sources/bison-3.7.1'
make[5]: Entering directory '/sources/bison-3.7.1'
PASS: examples/c/mfcalc/mfcalc.test
PASS: examples/c/rpcalc/rpcalc.test
PASS: examples/c/bistromathic/bistromathic.test
PASS: examples/c/calc/calc.test
PASS: examples/c/lexcalc/lexcalc.test
PASS: examples/c/pushcalc/calc.test
PASS: examples/c/reccalc/reccalc.test
PASS: examples/c++/calc++/calc++.test
PASS: examples/c++/simple.test
PASS: examples/c++/variant.test
PASS: examples/c++/variant-11.test
============================================================================
Testsuite summary for GNU Bison 3.7.1
============================================================================
# TOTAL: 11
# PASS:  11
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[5]: Leaving directory '/sources/bison-3.7.1'
  GEN      doc/bison.help
make  all-recursive
make[5]: Entering directory '/sources/bison-3.7.1'
Making all in po
make[6]: Entering directory '/sources/bison-3.7.1/po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.1/po'
Making all in runtime-po
make[6]: Entering directory '/sources/bison-3.7.1/runtime-po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.1/runtime-po'
Making all in gnulib-po
make[6]: Entering directory '/sources/bison-3.7.1/gnulib-po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.1/gnulib-po'
Making all in .
make[6]: Entering directory '/sources/bison-3.7.1'
  GEN      doc/bison.help
make[6]: Leaving directory '/sources/bison-3.7.1'
make[5]: Leaving directory '/sources/bison-3.7.1'
/bin/sh ./tests/testsuite -C tests 
## --------------------------- ##
## GNU Bison 3.7.1 test suite. ##
## --------------------------- ##

M4 Macros.

  1: Generating Comments                             ok

Input Processing.

  2: Invalid number of arguments                     ok
  3: Invalid options                                 ok
  4: Invalid inputs                                  ok
  5: Invalid inputs with {}                          ok
  6: Yacc warnings on symbols                        ok
  7: Yacc warnings                                   ok
  8: Yacc's %type                                    ok
  9: Invalid symbol declarations                     ok
 10: Redefining the error token                      ok
 11: Dangling aliases                                ok
 12: Symbol declarations                             ok
 13: Invalid $n and @n                               ok
 14: Type Clashes                                    ok
 15: Unused values                                   ok
 16: Unused values before symbol declarations        ok
 17: Symbol redeclared                               ok
 18: Symbol class redefinition                       ok
 19: Default %printer and %destructor redeclared     ok
 20: Per-type %printer and %destructor redeclared    ok
 21: Undefined symbols                               ok
 22: Unassociated types used for a printer or destructor ok
 23: Useless printers or destructors                 ok
 24: Unused values with default %destructor          ok
 25: Unused values with per-type %destructor         ok
 26: Duplicate string                                ok
 27: Token collisions                                ok
 28: Incompatible Aliases                            ok
 29: Torturing the Scanner                           ok
 30: Typed symbol aliases                            ok
 31: Require 1.0                                     ok
 32: Require 3.7.1                                   ok
 33: Require 100.0                                   ok
 34: String aliases for character tokens             ok
 35: Symbols                                         ok
 36: Numbered tokens                                 ok
 37: Unclosed constructs                             ok
 38: %start after first rule                         ok
 39: %prec takes a token                             ok
 40: %prec's token must be defined                   ok
 41: Reject unused %code qualifiers                  ok
 42: Multiple %code                                  ok
 43: errors                                          ok
 44: %define, --define, --force-define               ok
 45: "%define" Boolean variables                     ok
 46: "%define" code variables                        ok
 47: "%define" keyword variables                     ok
 48: "%define" enum variables                        ok
 49: "%define" file variables                        ok
 50: "%define" backward compatibility                ok
 51: Unused api.pure                                 ok
 52: C++ namespace reference errors                  ok
 53: Bad character literals                          ok
 54: Bad escapes in literals                         ok
 55: LAC: Errors for %define                         ok
 56: -Werror combinations                            ok
 57: %name-prefix and api.prefix are incompatible    ok
 58: Redefined %union name                           ok
 59: Stray $ or @                                    ok
 60: Code injection                                  ok
 61: Deprecated directives                           ok
 62: Unput's effect on locations                     ok
 63: Non-deprecated directives                       ok
 64: Cannot type action                              ok
 65: Character literals and api.token.raw            ok
 66: %token-table and parse.error                    ok
 67: Invalid file prefix mapping arguments           ok

Named references tests.

 68: Tutorial calculator                             ok
 69: Undefined and ambiguous references              ok
 70: Misleading references                           ok
 71: Many kinds of errors                            ok
 72: Missing identifiers in brackets                 ok
 73: Redundant words in brackets                     ok
 74: Comments in brackets                            ok
 75: Stray symbols in brackets                       ok
 76: Redundant words in LHS brackets                 ok
 77: Factored LHS                                    ok
 78: Unresolved references                           ok
 79: $ or @ followed by . or -                       ok

Output file names.

 80: Output files:  -dv                              ok
 81: Output files:  -dv >&-                          ok
 82: Output files:  -dv -o foo.c                     ok
 83: Output files:  -dv -y                           ok
 84: Output files: api.header.include={"./foo.h"} -dv -y ok
 85: Output files:  -dv -o foo.tab.c                 ok
 86: Output files:  -dv -g --xml --fixed-output-files ok
 87: Output files:  -dv -g --xml -y                  ok
 88: Output files: %require "3.4" -dv -g --xml -y    ok
 89: Output files:  -dv -g --xml -o y.tab.c          ok
 90: Output files:  -dv -b bar                       ok
 91: Output files:  -dv -g -o foo.c                  ok
 92: Output files: %defines %verbose                 ok
 93: Output files: %defines %verbose %yacc           ok
 94: Output files: %defines %verbose %yacc           ok
 95: Output files: %file-prefix "bar" %defines %verbose  ok
 96: Output files: %output "bar.c" %defines %verbose %yacc  ok
 97: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc  ok
 98: Output files: %defines %verbose                 ok
 99: Output files: %defines %verbose  -o foo.c       ok
100: Output files:  --defines=foo.hpp -o foo.c++     ok
101: Output files: %defines "foo.hpp" -o foo.c++     ok
102: Output files:  -o foo.c++ --graph=foo.gph       ok
103: Output files: %type <foo> useless --defines --graph --xml --report=all -Wall -Werror ok
104: Output files: useless=--defines --graph --xml --report=all -Wall -Werror ok
105: Output files: lalr1.cc                          ok
106: Output files: lalr1.cc %verbose                 ok
107: Output files: lalr1.cc %defines %verbose        ok
108: Output files: lalr1.cc %verbose %locations      ok
109: Output files: lalr1.cc %defines %verbose %locations  ok
110: Output files: lalr1.cc %defines %verbose        ok
111: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc ok
112: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"  ok
113: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"  ok
114: Output files: lalr1.cc %defines %locations api.location.file=none %require "3.2"  ok
115: Output files: lalr1.cc %defines %locations api.location.file="foo.loc.hh" %require "3.2"  ok
116: Output files: lalr1.cc %defines %locations api.location.file="$at_dir/foo.loc.hh" %require "3.2"  ok
117: Conflicting output files:  --graph="foo.tab.c"  ok
118: Conflicting output files: %defines "foo.output" -v ok
119: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
120: Conflicting output files:  -o foo.y             ok
121: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
122: Output file name: (                             ok
123: Output file name: )                             ok
124: Output file name: #                             ok
125: Output file name: @@                            ok
126: Output file name: @{                            ok
127: Output file name: @}                            ok
128: Output file name: [                             ok
129: Output file name: ]                             ok
130: Graph with no conflicts                         ok
131: Graph with unsolved S/R                         ok
132: Graph with solved S/R                           ok
133: Graph with R/R                                  ok
134: Graph with reductions with multiple LAT         ok
135: Graph with a reduction rule both enabled and disabled ok
136: C++ Output File Prefix Mapping                  ok

Diagnostics.

137: Warnings                                        ok
138: Single point locations                          ok
139: Line is too short, and then you die             ok
140: Zero-width characters                           ok
141: Tabulations and multibyte characters            ok
142: Tabulations and multibyte characters            ok
143: Special files                                   ok
144: Complaints from M4                              ok
145: Carriage return                                 ok
146: CR NL                                           ok
147: Screen width: 200 columns                       ok
148: Screen width: 80 columns                        ok
149: Screen width: 60 columns                        ok
150: Suggestions                                     ok
151: Counterexamples                                 ok
152: Deep Counterexamples                            ok
153: Indentation with message suppression            ok

Skeleton Support.

154: Relative skeleton file names                    ok
155: Installed skeleton file names                   ok
156: Boolean=variables: invalid skeleton defaults    ok
157: Complaining during macro argument expansion     ok
158: Fatal errors make M4 exit immediately           ok
159: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

160: Nullable                                        ok
161: Broken Closure                                  ok
162: Firsts                                          ok
163: Accept                                          ok
164: Build relations                                 ok
165: Reduced Grammar                                 ok
166: Reduced Grammar with prec and assoc             ok

Grammar Reduction.

167: Useless Terminals                               ok
168: Useless Nonterminals                            ok
169: Useless Rules                                   ok
170: Useless Parts                                   ok
171: Reduced Automaton                               ok
172: Underivable Rules                               ok
173: Empty Language                                  ok
174: no lr.type: Single State Split                  ok
175: lr.type=lalr: Single State Split                ok
176: lr.type=ielr: Single State Split                ok
177: lr.type=canonical-lr: Single State Split        ok
178: no lr.type: Lane Split                          ok
179: lr.type=lalr: Lane Split                        ok
180: lr.type=ielr: Lane Split                        ok
181: lr.type=canonical-lr: Lane Split                ok
182: no lr.type: Complex Lane Split                  ok
183: lr.type=lalr: Complex Lane Split                ok
184: lr.type=ielr: Complex Lane Split                ok
185: lr.type=canonical-lr: Complex Lane Split        ok
186: no lr.type: Split During Added Lookahead Propagation ok
187: lr.type=lalr: Split During Added Lookahead Propagation ok
188: lr.type=ielr: Split During Added Lookahead Propagation ok
189: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
190: no lr.default-reduction                         ok
191: lr.default-reduction=most                       ok
192: lr.default-reduction=consistent                 ok
193: lr.default-reduction=accepting                  ok

Test reports.

194: Reports                                         ok
195: Reports with conflicts                          ok

Conflicts.

196: Token declaration order                         ok
197: Token declaration order: literals vs. identifiers ok
198: Useless associativity warning                   ok
199: Useless precedence warning                      ok
200: S/R in initial                                  ok
201: %nonassoc and eof                               ok
202: parse.error=verbose and consistent errors: lr.type=ielr ok
203: parse.error=verbose and consistent errors: lr.type=ielr %glr-parser ok
204: parse.error=verbose and consistent errors: lr.type=ielr c++ ok
205: parse.error=verbose and consistent errors: lr.type=ielr java skipped (conflicts.at:523)
206: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=consistent ok
207: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=accepting ok
208: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
209: parse.error=verbose and consistent errors: lr.type=canonical-lr parse.lac=full ok
210: parse.error=verbose and consistent errors: lr.type=ielr parse.lac=full ok
211: parse.error=verbose and consistent errors: c++ lr.type=canonical-lr parse.lac=full ok
212: parse.error=verbose and consistent errors: c++ lr.type=ielr parse.lac=full ok
213: parse.error=verbose and consistent errors:      ok
214: parse.error=verbose and consistent errors: %glr-parser ok
215: parse.error=verbose and consistent errors: lr.default-reduction=consistent ok
216: parse.error=verbose and consistent errors: lr.default-reduction=accepting ok
217: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
218: parse.error=verbose and consistent errors: parse.lac=full ok
219: parse.error=verbose and consistent errors: parse.lac=full lr.default-reduction=accepting ok
220: LAC: %nonassoc requires splitting canonical LR states ok
221: Unresolved SR Conflicts                         ok
222: Resolved SR Conflicts                           ok
223: %precedence suffices                            ok
224: %precedence does not suffice                    ok
225: Syntax error in consistent error state: yacc.c  ok
226: Syntax error in consistent error state: glr.c   ok
227: Syntax error in consistent error state: lalr1.cc ok
228: Syntax error in consistent error state: glr.cc  ok
229: Defaulted Conflicted Reduction                  ok
230: %expect not enough                              ok
231: %expect right                                   ok
232: %expect too much                                ok
233: %expect with reduce conflicts                   ok
234: %expect in grammar rule not enough              ok
235: %expect in grammar rule right                   ok
236: %expect in grammar rules                        ok
237: %expect in grammar rule too much                ok
238: %expect-rr in grammar rule                      ok
239: %expect-rr too much in grammar rule             ok
240: %expect-rr not enough in grammar rule           ok
241: %prec with user string                          ok
242: %no-default-prec without %prec                  ok
243: %no-default-prec with %prec                     ok
244: %default-prec                                   ok
245: Unreachable States After Conflict Resolution    ok
246: Solved conflicts report for multiple reductions in a state ok
247: %nonassoc error actions for multiple reductions in a state ok
248: %expect-rr non GLR                              ok
249: -W versus %expect and %expect-rr                ok

Counterexamples.

250: Unifying S/R                                    ok
251: Deep Unifying S/R                               ok
252: S/R Conflict with Nullable Symbols              ok
253: Non-unifying Ambiguous S/R                      ok
254: Non-unifying Unambiguous S/R                    ok
255: S/R after first token                           ok
256: Unifying R/R counterexample                     ok
257: Non-unifying R/R LR(1) conflict                 ok
258: Non-unifying R/R LR(2) conflict                 ok
259: Cex Search Prepend                              ok
260: R/R cex with prec                               ok
261: Null nonterminals                               ok
262: Non-unifying Prefix Share                       ok
263: Deep Null Unifying                              ok
264: Deep Null Non-unifying                          ok

Sync Lines.

265: Prologue syncline                               ok
266: %union syncline                                 ok
267: %union name syncline                            ok
268: Postprologue syncline                           ok
269: Action syncline                                 ok
270: Epilogue syncline                               ok
271: %code top syncline                              ok
272: %destructor syncline                            ok
273: %printer syncline                               ok
274: syncline escapes: yacc.c                        ok
275: syncline escapes: glr.c                         ok
276: syncline escapes: lalr1.cc                      ok
277: syncline escapes: glr.cc                        ok
278: %no-lines: yacc.c                               ok
279: %no-lines: glr.c                                ok
280: %no-lines: lalr1.cc                             ok
281: %no-lines: glr.cc                               ok
282: Output columns                                  ok

Parser Headers.

283: Invalid CPP guards:  --defines=input/input.h    ok
284: Invalid CPP guards:  --defines=9foo.h           ok
285: Invalid CPP guards: %glr-parser --defines=input/input.h ok
286: Invalid CPP guards: %glr-parser --defines=9foo.h ok
287: export YYLTYPE                                  ok
288: Sane headers:                                   ok
289: Sane headers: %locations %debug                 ok
290: Sane headers: %glr-parser                       ok
291: Sane headers: %locations %debug %glr-parser     ok
292: Sane headers: api.pure                          ok
293: Sane headers: api.push-pull=both                ok
294: Sane headers: api.pure api.push-pull=both       ok
295: Sane headers: c++                               ok
296: Sane headers: %locations %debug c++             ok
297: Sane headers: c++ api.value.type=variant parse.assert ok
298: Sane headers: %locations c++ %glr-parser        ok
299: Several parsers                                 ok

User Actions.

300: Midrule actions                                 ok
301: Typed midrule actions                           ok
302: Implicitly empty rule                           ok
303: Invalid uses of %empty                          ok
304: Valid uses of %empty                            ok
305: Add missing %empty                              ok
306: Initial location: yacc.c                        ok
307: Initial location: yacc.c api.pure=full          ok
308: Initial location: yacc.c api.pure %parse-param { int x } ok
309: Initial location: yacc.c api.push-pull=both     ok
310: Initial location: yacc.c api.push-pull=both api.pure=full ok
311: Initial location: glr.c                         ok
312: Initial location: glr.c api.pure                ok
313: Initial location: lalr1.cc                      ok
314: Initial location: glr.cc                        ok
315: Initial location: yacc.c api.pure=full          ok
316: Initial location: yacc.c api.pure=full          ok
317: Location print: yacc.c                          ok
318: Location print: glr.c                           ok
319: Location print: lalr1.cc                        ok
320: Location print: glr.cc                          ok
321: Exotic Dollars                                  ok
322: Printers and Destructors                        ok
323: Printers and Destructors with union             ok
324: Printers and Destructors: %glr-parser           ok
325: Printers and Destructors with union: %glr-parser ok
326: Printers and Destructors: %defines lalr1.cc     ok
327: Printers and Destructors with union: %defines lalr1.cc ok
328: Printers and Destructors: %defines glr.cc       ok
329: Printers and Destructors with union: %defines glr.cc ok
330: Default tagless %printer and %destructor        ok
331: Default tagged and per-type %printer and %destructor ok
332: Default %printer and %destructor for user-defined end token ok
333: Default %printer and %destructor are not for error or $undefined ok
334: Default %printer and %destructor are not for $accept ok
335: Default %printer and %destructor for midrule values ok
336: @$ in %initial-action implies %locations        ok
337: @$ in %destructor implies %locations            ok
338: @$ in %printer implies %locations               ok
339: Qualified $$ in actions: yacc.c                 ok
340: Qualified $$ in actions: glr.c                  ok
341: Qualified $$ in actions: lalr1.cc               ok
342: Qualified $$ in actions: glr.cc                 ok
343: Destroying lookahead assigned by semantic action ok
344: YYBACKUP                                        ok

Value type tests.

345: %union vs. api.value.type                       ok
346: %yacc vs. api.value.type=union                  ok
347: yacc.c api.value.type={double}                  ok
348: yacc.c api.value.type={double} %defines         ok
349: yacc.c api.value.type={variant}                 ok
350: yacc.c api.value.type={variant} %defines        ok
351: yacc.c api.value.type={struct foo}              ok
352: yacc.c api.value.type={struct foo} %defines     ok
353: yacc.c api.value.type={struct bar}              ok
354: yacc.c api.value.type={struct bar} %defines     ok
355: yacc.c api.value.type={union foo}               ok
356: yacc.c api.value.type={union foo} %defines      ok
357: yacc.c %union { float fval; int ival; };        ok
358: yacc.c %union { float fval; int ival; }; %defines ok
359: yacc.c %union foo { float fval; int ival; };    ok
360: yacc.c %union foo { float fval; int ival; }; %defines ok
361: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; ok
362: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
363: yacc.c api.value.type=union                     ok
364: yacc.c api.value.type=union %defines            ok
365: glr.c api.value.type={double}                   ok
366: glr.c api.value.type={double} %defines          ok
367: glr.c api.value.type={variant}                  ok
368: glr.c api.value.type={variant} %defines         ok
369: glr.c api.value.type={struct foo}               ok
370: glr.c api.value.type={struct foo} %defines      ok
371: glr.c api.value.type={struct bar}               ok
372: glr.c api.value.type={struct bar} %defines      ok
373: glr.c api.value.type={union foo}                ok
374: glr.c api.value.type={union foo} %defines       ok
375: glr.c %union { float fval; int ival; };         ok
376: glr.c %union { float fval; int ival; }; %defines ok
377: glr.c %union foo { float fval; int ival; };     ok
378: glr.c %union foo { float fval; int ival; }; %defines ok
379: glr.c api.value.union.name=foo; %union { float fval; int ival; }; ok
380: glr.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
381: glr.c api.value.type=union                      ok
382: glr.c api.value.type=union %defines             ok
383: lalr1.cc api.value.type={double}                ok
384: lalr1.cc api.value.type={double} %defines       ok
385: lalr1.cc api.value.type={variant}               ok
386: lalr1.cc api.value.type={variant} %defines      ok
387: lalr1.cc api.value.type={struct foo}            ok
388: lalr1.cc api.value.type={struct foo} %defines   ok
389: lalr1.cc api.value.type={struct bar}            ok
390: lalr1.cc api.value.type={struct bar} %defines   ok
391: lalr1.cc api.value.type={union foo}             ok
392: lalr1.cc api.value.type={union foo} %defines    ok
393: lalr1.cc %union { float fval; int ival; };      ok
394: lalr1.cc %union { float fval; int ival; }; %defines ok
395: lalr1.cc api.value.type=union                   ok
396: lalr1.cc api.value.type=union %defines          ok
397: lalr1.cc api.value.type=variant                 ok
398: lalr1.cc api.value.type=variant %defines        ok
399: lalr1.cc api.value.type=variant                 ok
400: lalr1.cc api.value.type=variant %defines        ok
401: lalr1.cc api.value.type=variant api.token.constructor ok
402: lalr1.cc api.value.type=variant api.token.constructor %defines ok
403: lalr1.cc %code requires { #include <memory> } api.value.type=variant ok
404: lalr1.cc %code requires { #include <memory> } api.value.type=variant %defines ok
405: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
406: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
407: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
408: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
409: glr.cc api.value.type={double}                  ok
410: glr.cc api.value.type={double} %defines         ok
411: glr.cc api.value.type={variant}                 ok
412: glr.cc api.value.type={variant} %defines        ok
413: glr.cc api.value.type={struct foo}              ok
414: glr.cc api.value.type={struct foo} %defines     ok
415: glr.cc api.value.type={struct bar}              ok
416: glr.cc api.value.type={struct bar} %defines     ok
417: glr.cc api.value.type={union foo}               ok
418: glr.cc api.value.type={union foo} %defines      ok
419: glr.cc %union { float fval; int ival; };        ok
420: glr.cc %union { float fval; int ival; }; %defines ok
421: glr.cc api.value.type=union                     ok
422: glr.cc api.value.type=union %defines            ok
423: lalr1.cc: Named %union                          ok
424: glr.cc: Named %union                            ok

Interface with the scanner.

425: Token numbers: yacc.c                           ok
426: Token numbers: yacc.c api.token.raw             ok
427: Token numbers: glr.c                            ok
428: Token numbers: glr.c api.token.raw              ok
429: Token numbers: lalr1.cc                         ok
430: Token numbers: lalr1.cc api.token.raw           ok
431: Token numbers: glr.cc                           ok
432: Token numbers: glr.cc api.token.raw             ok
433: Token numbers: lalr1.java                       skipped (scanner.at:336)
434: Token numbers: lalr1.java api.token.raw         skipped (scanner.at:336)
435: Token numbers: lalr1.d                          skipped (scanner.at:336)
436: Token numbers: lalr1.d api.token.raw            skipped (scanner.at:336)
437: Token numbers: lalr1.cc api.token.raw api.value.type=variant api.token.constructor ok

LALR(1) Calculator.

438: Calculator parse.trace                          ok
439: Calculator %defines                             ok
440: Calculator %debug %locations                    ok
441: Calculator %locations api.location.type={Span}  ok
442: Calculator %name-prefix "calc"                  ok
443: Calculator %verbose                             ok
444: Calculator %yacc                                ok
445: Calculator parse.error=detailed                 ok
446: Calculator parse.error=verbose                  ok
447: Calculator api.pure=full %locations             ok
448: Calculator api.push-pull=both api.pure=full %locations  ok
449: Calculator parse.error=detailed %locations      ok
450: Calculator parse.error=detailed %locations %defines api.prefix={calc} %verbose %yacc  ok
451: Calculator parse.error=detailed %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
452: Calculator %debug                               ok
453: Calculator parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
454: Calculator parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
455: Calculator api.pure=full parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
456: Calculator api.push-pull=both api.pure=full parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
457: Calculator api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
458: Calculator %no-lines api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
459: Calculator %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
460: Calculator parse.error=custom                   ok
461: Calculator parse.error=custom %locations api.prefix={calc}  ok
462: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
463: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full  ok
464: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full parse.lac=full  ok

GLR Calculator.

465: Calculator %glr-parser                          ok
466: Calculator %glr-parser %defines                 ok
467: Calculator %glr-parser %locations               ok
468: Calculator %glr-parser %locations api.location.type={Span}  ok
469: Calculator %glr-parser %name-prefix "calc"      ok
470: Calculator %glr-parser api.prefix={calc}        ok
471: Calculator %glr-parser %verbose                 ok
472: Calculator %glr-parser parse.error=verbose      ok
473: Calculator %glr-parser api.pure %locations      ok
474: Calculator %glr-parser parse.error=verbose %locations  ok
475: Calculator %glr-parser parse.error=custom %locations %defines %name-prefix "calc" %verbose  ok
476: Calculator %glr-parser parse.error=detailed %locations %defines %name-prefix "calc" %verbose  ok
477: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose  ok
478: Calculator %glr-parser %debug                   ok
479: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
480: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
481: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
482: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
483: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
484: Calculator %glr-parser %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok

LALR(1) C++ Calculator.

485: Calculator lalr1.cc %defines                    ok
486: Calculator C++                                  ok
487: Calculator C++ %locations                       ok
488: Calculator C++ %locations $NO_EXCEPTIONS_CXXFLAGS ok
489: Calculator C++ %locations api.location.type={Span}  ok
490: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose  ok
491: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose  ok
492: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose  ok
493: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose  ok
494: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
495: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
496: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
497: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
498: Calculator C++ %defines %locations api.location.file=none  ok
499: Calculator C++ %defines %locations api.location.file="my-location.hh"  ok
500: Calculator C++ %no-lines %defines %locations api.location.file="my-location.hh"  ok
501: Calculator C++ %locations parse.lac=full parse.error=verbose  ok
502: Calculator C++ %locations parse.lac=full parse.error=detailed  ok
503: Calculator C++ parse.error=custom               ok
504: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
505: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} parse.lac=full  ok

GLR C++ Calculator.

506: Calculator glr.cc                               ok
507: Calculator C++ %glr-parser                      ok
508: Calculator C++ %glr-parser %locations           ok
509: Calculator C++ %glr-parser %locations api.location.type={Span}  ok
510: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose  ok
511: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose  ok
512: Calculator C++ %glr-parser %debug               ok
513: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose  ok
514: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose  ok
515: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
516: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
517: Calculator C++ %glr-parser %no-lines %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok

LALR(1) D Calculator.

518: Calculator lalr1.d                              skipped (calc.at:1229)
519: Calculator D                                    skipped (calc.at:1234)
520: Calculator D %locations                         skipped (calc.at:1235)
521: Calculator D parse.error=verbose api.prefix={calc} %verbose  skipped (calc.at:1237)
522: Calculator D %debug                             skipped (calc.at:1239)
523: Calculator D parse.error=verbose %debug %verbose  skipped (calc.at:1241)

LALR(1) Java Calculator.

524: Calculator Java                                 skipped (calc.at:1257)
525: Calculator Java parse.error=custom              skipped (calc.at:1258)
526: Calculator Java parse.error=detailed            skipped (calc.at:1259)
527: Calculator Java parse.error=verbose             skipped (calc.at:1260)
528: Calculator Java %locations parse.error=custom   skipped (calc.at:1261)
529: Calculator Java %locations parse.error=detailed  skipped (calc.at:1262)
530: Calculator Java %locations parse.error=verbose  skipped (calc.at:1263)
531: Calculator Java parse.trace parse.error=verbose  skipped (calc.at:1264)
532: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is}  skipped (calc.at:1265)
533: Calculator Java api.push-pull=both              skipped (calc.at:1267)
534: Calculator Java api.push-pull=both parse.error=detailed %locations  skipped (calc.at:1268)
535: Calculator Java parse.trace parse.error=custom %locations %lex-param {InputStream is} api.push-pull=both  skipped (calc.at:1269)
536: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is} api.push-pull=both  skipped (calc.at:1270)

Torture Tests.

537: Big triangle                                    ok
538: Big horizontal                                  ok
539: State number type: 128 states                   skipped (torture.at:270)
540: State number type: 129 states                   skipped (torture.at:271)
541: State number type: 256 states                   skipped (torture.at:272)
542: State number type: 257 states                   skipped (torture.at:273)
543: State number type: 32768 states                 skipped (torture.at:274)
544: State number type: 65536 states                 skipped (torture.at:275)
545: State number type: 65537 states                 skipped (torture.at:276)
546: Many lookahead tokens                           ok
547: Exploding the Stack Size with Alloca            ok
548: Exploding the Stack Size with Malloc            ok

Existing Grammars.

549: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
550: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
551: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
552: GNU Cim Grammar: LALR(1)                        ok
553: GNU Cim Grammar: IELR(1)                        ok
554: GNU Cim Grammar: Canonical LR(1)                ok
555: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
556: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
557: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

558: Trivial grammars                                ok
559: YYSTYPE typedef                                 ok
560: Early token definitions with --yacc             ok
561: Early token definitions without --yacc          ok
562: Braces parsing                                  ok
563: Rule Line Numbers                               ok
564: Mixing %token styles                            ok
565: Token definitions: parse.error=detailed         ok
566: Token definitions: parse.error=verbose          ok
567: Characters Escapes                              ok
568: Web2c Report                                    ok
569: Web2c Actions                                   ok
570: Dancer                                          ok
571: Dancer %glr-parser                              ok
572: Dancer lalr1.cc                                 ok
573: Expecting two tokens                            ok
574: Expecting two tokens %glr-parser                ok
575: Expecting two tokens lalr1.cc                   ok
576: Braced code in declaration in rules section     ok
577: String alias declared after use                 ok
578: Extra lookahead sets in report                  ok
579: Token number in precedence declaration          ok
580: parse-gram.y: LALR = IELR                       ok
581: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
582: parse.error=verbose overflow                    ok
583: LAC: Exploratory stack                          ok
584: LAC: Memory exhaustion                          ok
585: Lex and parse params: yacc.c                    ok
586: Lex and parse params: glr.c                     ok
587: Lex and parse params: lalr1.cc                  ok
588: Lex and parse params: glr.cc                    ok
589: stdio.h is not needed                           ok

Push Parsing Tests

590: Memory Leak for Early Deletion                  ok
591: Multiple impure instances                       ok
592: Unsupported Skeletons                           ok

C++ Features.

593: C++ Locations Unit Tests                        ok
594: C++ Variant-based Symbols Unit Tests            ok
595: Multiple occurrences of $n and api.value.automove ok
596: Variants lalr1.cc                               ok
597: Variants lalr1.cc parse.assert                  ok
598: Variants lalr1.cc parse.assert api.value.automove ok
599: Variants lalr1.cc parse.assert %locations       ok
600: Variants lalr1.cc parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
601: Variants lalr1.cc parse.assert api.token.constructor ok
602: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} ok
603: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations ok
604: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations api.value.automove ok
605: Variants and Typed Midrule Actions              ok
606: Doxygen Public Documentation                    skipped (c++.at:794)
607: Doxygen Private Documentation                   skipped (c++.at:795)
608: Relative namespace references                   ok
609: Absolute namespace references                   ok
610: Syntactically invalid namespace references      ok
611: Syntax error discarding no lookahead            ok
612: Syntax error as exception: lalr1.cc             ok
613: Syntax error as exception: glr.cc               ok
614: Exception safety with error recovery            ok
615: Exception safety without error recovery         ok
616: Exception safety with error recovery api.value.type=variant ok
617: Exception safety without error recovery api.value.type=variant ok
618: C++ GLR parser identifier shadowing             ok
619: Shared locations                                ok
620: Default action                                  ok

Java Calculator.

621: Java invalid directives                         ok

Java Parameters.

622: Java parser class and package names             skipped (java.at:173)
623: Java parser class modifiers                     skipped (java.at:204)
624: Java parser class extends and implements        skipped (java.at:274)
625: Java %parse-param and %lex-param                skipped (java.at:294)
626: Java throws specifications                      skipped (java.at:426)
627: Java constructor init and init_throws           skipped (java.at:460)
628: Java value, position, and location types        skipped (java.at:484)
629: Java syntax error handling without error token  skipped (java.at:565)

Java Push Parsing Tests

630: Trivial Push Parser with api.push-pull verification skipped (javapush.at:207)
631: Trivial Push Parser with %initial-action        skipped (javapush.at:230)

C++ Type Syntax (GLR).

632: GLR: Resolve ambiguity, impure, no locations    ok
633: GLR: Resolve ambiguity, impure, locations       ok
634: GLR: Resolve ambiguity, pure, no locations      ok
635: GLR: Resolve ambiguity, pure, locations         ok
636: GLR: Merge conflicting parses, impure, no locations ok
637: GLR: Merge conflicting parses, impure, locations ok
638: GLR: Merge conflicting parses, pure, no locations ok
639: GLR: Merge conflicting parses, pure, locations  ok
640: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

641: Badly Collapsed GLR States                      ok
642: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
643: Improper merging of GLR delayed action sets     ok
644: Duplicate representation of merged trees        ok
645: User destructor for unresolved GLR semantic value ok
646: User destructor after an error during a split parse ok
647: Duplicated user destructor for lookahead        ok
648: Incorrectly initialized location for empty right-hand side in GLR ok
649: No users destructors if stack 0 deleted         ok
650: Corrupted semantic options if user action cuts parse ok
651: Undesirable destructors if user action cuts parse ok
652: Leaked semantic values if user action cuts parse ok
653: Incorrect lookahead during deterministic GLR    ok
654: Incorrect lookahead during nondeterministic GLR ok
655: Leaked semantic values when reporting ambiguity ok
656: Leaked lookahead after nondeterministic parse syntax error ok
657: Uninitialized location when reporting ambiguity ok
658: Missed %merge type warnings when LHS type is declared later ok
659: Ambiguity reports                               ok
660: Predicates                                      ok

## ------------- ##
## Test results. ##
## ------------- ##

617 tests were successful.
43 tests were skipped.
make[4]: Leaving directory '/sources/bison-3.7.1'
make[3]: Leaving directory '/sources/bison-3.7.1'
make[2]: Leaving directory '/sources/bison-3.7.1'
make[1]: Leaving directory '/sources/bison-3.7.1'
