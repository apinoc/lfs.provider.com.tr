Sun Feb 28 12:18:10 CST 2021
make[1]: Entering directory '/sources/bison-3.7.5'
  GEN      public-submodule-commit
make  check-recursive
make[2]: Entering directory '/sources/bison-3.7.5'
Making check in po
make[3]: Entering directory '/sources/bison-3.7.5/po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.5/po'
Making check in runtime-po
make[3]: Entering directory '/sources/bison-3.7.5/runtime-po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.5/runtime-po'
Making check in gnulib-po
make[3]: Entering directory '/sources/bison-3.7.5/gnulib-po'
make[3]: Nothing to be done for 'check'.
make[3]: Leaving directory '/sources/bison-3.7.5/gnulib-po'
Making check in .
make[3]: Entering directory '/sources/bison-3.7.5'
  GEN      doc/bison.help
make  examples/c/bistromathic/bistromathic examples/c/calc/calc examples/c/lexcalc/lexcalc examples/c/mfcalc/mfcalc examples/c/pushcalc/calc examples/c/reccalc/reccalc examples/c/rpcalc/rpcalc examples/c++/calc++/calc++ examples/c++/simple examples/c++/variant examples/c++/variant-11   ./tests/bison tests/atconfig tests/atlocal
make[4]: Entering directory '/sources/bison-3.7.5'
  YACC     examples/c/bistromathic/parse.c
  YACC     examples/c/calc/calc.c
  YACC     examples/c/lexcalc/parse.c
  LEX      examples/c/lexcalc/scan.c
  YACC     examples/c/mfcalc/mfcalc.c
  YACC     examples/c/pushcalc/calc.c
  YACC     examples/c/reccalc/parse.c
  YACC     examples/c/rpcalc/rpcalc.c
  YACC     examples/c++/calc++/parser.stamp
  LEX      examples/c++/calc++/scanner.cc
  YACC     examples/c++/simple.cc
make[4]: 'tests/bison' is up to date.
  YACC     examples/c++/variant.cc
make[4]: Nothing to be done for 'tests/atconfig'.
make[4]: 'tests/atlocal' is up to date.
  YACC     examples/c++/variant-11.cc
updating examples/c/calc/calc.output
updating examples/c/rpcalc/rpcalc.output
updating examples/c/lexcalc/parse.output
updating examples/c/pushcalc/calc.output
updating examples/c/calc/calc.h
updating examples/c/rpcalc/rpcalc.h
updating examples/c/reccalc/parse.output
updating examples/c/lexcalc/parse.h
  CC       examples/c/calc/examples_c_calc_calc-calc.o
  CXX      examples/c++/calc++/calc__-driver.o
updating examples/c/pushcalc/calc.h
  CXX      examples/c++/calc++/calc__-scanner.o
  CXX      examples/c++/calc++/calc__-calc++.o
  CXX      examples/c++/calc++/calc__-parser.o
  CC       examples/c/lexcalc/examples_c_lexcalc_lexcalc-parse.o
  CC       examples/c/lexcalc/examples_c_lexcalc_lexcalc-scan.o
  CC       examples/c/rpcalc/examples_c_rpcalc_rpcalc-rpcalc.o
updating examples/c/bistromathic/parse.output
  CC       examples/c/pushcalc/examples_c_pushcalc_calc-calc.o
updating examples/c/reccalc/parse.h
updating examples/c++/simple.output
  CC       examples/c/reccalc/examples_c_reccalc_reccalc-parse.o
updating examples/c/mfcalc/mfcalc.output
  CC       examples/c/reccalc/examples_c_reccalc_reccalc-scan.o
updating examples/c/bistromathic/parse.h
updating examples/c++/variant-11.output
updating examples/c++/variant.output
  CC       examples/c/bistromathic/bistromathic-parse.o
updating examples/c++/simple.hh
updating examples/c/mfcalc/mfcalc.h
  CXX      examples/c++/simple-simple.o
  CC       examples/c/mfcalc/examples_c_mfcalc_mfcalc-mfcalc.o
updating examples/c++/variant-11.hh
updating examples/c++/variant.hh
  CXX      examples/c++/variant_11-variant-11.o
  CXX      examples/c++/variant-variant.o
  CCLD     examples/c/rpcalc/rpcalc
  CCLD     examples/c/mfcalc/mfcalc
  CCLD     examples/c/calc/calc
  CCLD     examples/c/pushcalc/calc
  CCLD     examples/c/lexcalc/lexcalc
  CCLD     examples/c/reccalc/reccalc
  CCLD     examples/c/bistromathic/bistromathic
  CXXLD    examples/c++/simple
  CXXLD    examples/c++/variant-11
  CXXLD    examples/c++/variant
  CXXLD    examples/c++/calc++/calc++
make[4]: Leaving directory '/sources/bison-3.7.5'
make  check-TESTS check-local
make[4]: Entering directory '/sources/bison-3.7.5'
make  all-recursive
make[5]: Entering directory '/sources/bison-3.7.5'
make[5]: Entering directory '/sources/bison-3.7.5'
Making all in po
make[6]: Entering directory '/sources/bison-3.7.5/po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.5/po'
Making all in runtime-po
make[6]: Entering directory '/sources/bison-3.7.5/runtime-po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.5/runtime-po'
Making all in gnulib-po
make[6]: Entering directory '/sources/bison-3.7.5/gnulib-po'
make[6]: Nothing to be done for 'all'.
make[6]: Leaving directory '/sources/bison-3.7.5/gnulib-po'
Making all in .
PASS: examples/c++/simple.test
PASS: examples/c++/variant.test
PASS: examples/c++/variant-11.test
make[6]: Entering directory '/sources/bison-3.7.5'
PASS: examples/c/mfcalc/mfcalc.test
PASS: examples/c/lexcalc/lexcalc.test
PASS: examples/c/rpcalc/rpcalc.test
PASS: examples/c/pushcalc/calc.test
PASS: examples/c/calc/calc.test
PASS: examples/c/reccalc/reccalc.test
PASS: examples/c++/calc++/calc++.test
PASS: examples/c/bistromathic/bistromathic.test
  GEN      doc/bison.help
============================================================================
Testsuite summary for GNU Bison 3.7.5
============================================================================
# TOTAL: 11
# PASS:  11
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[5]: Leaving directory '/sources/bison-3.7.5'
make[6]: Leaving directory '/sources/bison-3.7.5'
make[5]: Leaving directory '/sources/bison-3.7.5'
/bin/sh ./tests/testsuite -C tests -j22
## --------------------------- ##
## GNU Bison 3.7.5 test suite. ##
## --------------------------- ##

  5: Invalid inputs with {}                          ok
  9: Invalid symbol declarations                     ok
 13: Invalid $n and @n                               ok
 21: Per-type %printer and %destructor redeclared    ok
 14: Type Clashes                                    ok
 22: Undefined symbols                               ok
  4: Invalid inputs                                  ok
 19: Symbol class redefinition                       ok
  1: Generating Comments                             ok
  3: Invalid options                                 ok
 20: Default %printer and %destructor redeclared     ok
  2: Invalid number of arguments                     ok
 28: Token collisions                                ok
 12: Symbol declarations                             ok
 34: Require 100.0                                   ok
 31: Typed symbol aliases                            ok
 32: Require 1.0                                     ok
 33: Require 3.7.5                                   ok
 35: String aliases for character tokens             ok
 38: Unclosed constructs                             ok
 29: Incompatible Aliases                            ok
 40: %prec takes a token                             ok
 39: %start after first rule                         ok
 37: Numbered tokens                                 ok
 10: Redefining the error token                      ok
 44: errors                                          ok
 46: "%define" Boolean variables                     ok
  6: Yacc warnings on symbols                        ok
 17: Symbol redeclared                               ok
 18: EOF redeclared                                  ok
 45: %define, --define, --force-define               ok
 11: Dangling aliases                                ok
 51: "%define" backward compatibility                ok
  8: Yacc's %type                                    ok
 26: Unused values with per-type %destructor         ok
 23: Unassociated types used for a printer or destructor ok
  7: Yacc warnings                                   ok
 27: Duplicate string                                ok
 55: Bad escapes in literals                         ok
 43: Multiple %code                                  ok
 50: "%define" file variables                        ok
 49: "%define" enum variables                        ok
 54: Bad character literals                          ok
 41: %prec's token must be defined                   ok
 64: Unput's effect on locations                     ok
 30: Torturing the Scanner                           ok
 67: Character literals and api.token.raw            ok
 56: Unexpected end of file                          ok
 69: Invalid file prefix mapping arguments           ok
 42: Reject unused %code qualifiers                  ok
 68: %token-table and parse.error                    ok
 71: Undefined and ambiguous references              ok
 74: Missing identifiers in brackets                 ok
 59: %name-prefix and api.prefix are incompatible    ok
 36: Symbols                                         ok
 63: Deprecated directives                           ok
 73: Many kinds of errors                            ok
 75: Redundant words in brackets                     ok
 76: Comments in brackets                            ok
 77: Stray symbols in brackets                       ok
 78: Redundant words in LHS brackets                 ok
 25: Unused values with default %destructor          ok
 80: Unresolved references                           ok
 79: Factored LHS                                    ok
 52: Unused api.pure                                 ok
 66: Cannot type action                              ok
 65: Non-deprecated directives                       ok
 61: Stray $ or @                                    ok
 82: Output files:  -dv                              ok
 83: Output files:  -dv >&-                          ok
 84: Output files:  -dv -o foo.c                     ok
 85: Output files:  -dv -y                           ok
 60: Redefined %union name                           ok
 87: Output files:  -dv -o foo.tab.c                 ok
 88: Output files:  -dv -g --xml --fixed-output-files ok
 86: Output files: api.header.include={"./foo.h"} -dv -y ok
 89: Output files:  -dv -g --xml -y                  ok
 91: Output files:  -dv -g --xml -o y.tab.c          ok
 92: Output files:  -dv -b bar                       ok
 90: Output files: %require "3.4" -dv -g --xml -y    ok
 93: Output files:  -dv -g -o foo.c                  ok
 94: Output files: %defines %verbose                 ok
 96: Output files: %defines %verbose %yacc           ok
 97: Output files: %file-prefix "bar" %defines %verbose  ok
 70: Tutorial calculator                             ok
 95: Output files: %defines %verbose %yacc           ok
 72: Misleading references                           ok
 98: Output files: %output "bar.c" %defines %verbose %yacc  ok
 99: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc  ok
 48: "%define" keyword variables                     ok
100: Output files: %defines %verbose                 ok
101: Output files: %defines %verbose  -o foo.c       ok
102: Output files:  --defines=foo.hpp -o foo.c++     ok
 57: LAC: Errors for %define                         ok
 53: C++ namespace reference errors                  ok
103: Output files: %defines "foo.hpp" -o foo.c++     ok
104: Output files:  -o foo.c++ --graph=foo.gph       ok
105: Output files: %type <foo> useless --defines --graph --xml --report=all -Wall -Werror ok
108: Output files: lalr1.cc %verbose                 ok
 81: $ or @ followed by . or -                       ok
 47: "%define" code variables                        ok
109: Output files: lalr1.cc %defines %verbose        ok
106: Output files: useless=--defines --graph --xml --report=all -Wall -Werror ok
107: Output files: lalr1.cc                          ok
110: Output files: lalr1.cc %verbose %locations      ok
111: Output files: lalr1.cc %defines %verbose %locations  ok
117: Output files: lalr1.cc %defines %locations api.location.file="foo.loc.hh" %require "3.2"  ok
116: Output files: lalr1.cc %defines %locations api.location.file=none %require "3.2"  ok
112: Output files: lalr1.cc %defines %verbose        ok
114: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"  ok
118: Output files: lalr1.cc %defines %locations api.location.file="$at_dir/foo.loc.hh" %require "3.2"  ok
113: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc ok
122: Conflicting output files:  -o foo.y             ok
115: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"  ok
 62: Code injection                                  ok
 24: Useless printers or destructors                 ok
132: Graph with no conflicts                         ok
133: Graph with unsolved S/R                         ok
135: Graph with R/R                                  ok
134: Graph with solved S/R                           ok
136: Graph with reductions with multiple LAT         ok
141: Line is too short, and then you die             ok
142: Zero-width characters                           ok
119: Conflicting output files:  --graph="foo.tab.c"  ok
120: Conflicting output files: %defines "foo.output" -v ok
140: Single point locations                          ok
139: Warnings                                        ok
121: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
143: Tabulations and multibyte characters            ok
137: Graph with a reduction rule both enabled and disabled ok
147: Carriage return                                 ok
144: Tabulations and multibyte characters            ok
145: Special files                                   ok
152: Suggestions                                     ok
146: Complaints from M4                              ok
148: CR NL                                           ok
154: Deep Counterexamples                            ok
149: Screen width: 200 columns                       ok
150: Screen width: 80 columns                        ok
151: Screen width: 60 columns                        ok
153: Counterexamples                                 ok
158: Boolean=variables: invalid skeleton defaults    ok
156: Relative skeleton file names                    ok
161: Fatal errors but M4 continues producing output  ok
 58: -Werror combinations                            ok
160: Fatal errors make M4 exit immediately           ok
162: Nullable                                        ok
164: Firsts                                          ok
163: Broken Closure                                  ok
159: Complaining during macro argument expansion     ok
165: Accept                                          ok
168: Reduced Grammar with prec and assoc             ok
169: Useless Terminals                               ok
175: Empty Language                                  ok
155: Indentation with message suppression            ok
166: Build relations                                 ok
167: Reduced Grammar                                 ok
 15: Unused values                                   ok
174: Underivable Rules                               ok
 16: Unused values before symbol declarations        ok
176: no lr.type: Single State Split                  ok
177: lr.type=lalr: Single State Split                ok
173: Reduced Automaton                               ok
170: Useless Nonterminals                            ok
172: Useless Parts                                   ok
171: Useless Rules                                   ok
157: Installed skeleton file names                   ok
178: lr.type=ielr: Single State Split                ok
179: lr.type=canonical-lr: Single State Split        ok
182: lr.type=ielr: Lane Split                        ok
180: no lr.type: Lane Split                          ok
181: lr.type=lalr: Lane Split                        ok
183: lr.type=canonical-lr: Lane Split                ok
185: lr.type=lalr: Complex Lane Split                ok
184: no lr.type: Complex Lane Split                  ok
186: lr.type=ielr: Complex Lane Split                ok
187: lr.type=canonical-lr: Complex Lane Split        ok
199: Token declaration order: literals vs. identifiers ok
190: lr.type=ielr: Split During Added Lookahead Propagation ok
191: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
196: Reports                                         ok
197: Reports with conflicts                          ok
192: no lr.default-reduction                         ok
198: Token declaration order                         ok
194: lr.default-reduction=consistent                 ok
193: lr.default-reduction=most                       ok
195: lr.default-reduction=accepting                  ok
207: parse.error=verbose and consistent errors: lr.type=ielr java skipped (conflicts.at:523)
188: no lr.type: Split During Added Lookahead Propagation ok
189: lr.type=lalr: Split During Added Lookahead Propagation ok
125: Output file name: )                             ok
200: Useless associativity warning                   ok
127: Output file name: @@                            ok
201: Useless precedence warning                      ok
204: parse.error=verbose and consistent errors: lr.type=ielr ok
126: Output file name: #                             ok
208: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=consistent ok
130: Output file name: [                             ok
131: Output file name: ]                             ok
124: Output file name: (                             ok
209: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=accepting ok
123: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
129: Output file name: @}                            ok
210: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
128: Output file name: @{                            ok
224: Resolved SR Conflicts                           ok
225: %precedence suffices                            ok
202: S/R in initial                                  ok
211: parse.error=verbose and consistent errors: lr.type=canonical-lr parse.lac=full ok
212: parse.error=verbose and consistent errors: lr.type=ielr parse.lac=full ok
232: %expect not enough                              ok
215: parse.error=verbose and consistent errors:      ok
223: Unresolved SR Conflicts                         ok
233: %expect right                                   ok
234: %expect too much                                ok
235: %expect with reduce conflicts                   ok
218: parse.error=verbose and consistent errors: lr.default-reduction=accepting ok
217: parse.error=verbose and consistent errors: lr.default-reduction=consistent ok
219: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
236: %expect in grammar rule not enough              ok
239: %expect in grammar rule too much                ok
226: %precedence does not suffice                    ok
241: %expect-rr too much in grammar rule             ok
242: %expect-rr not enough in grammar rule           ok
220: parse.error=verbose and consistent errors: parse.lac=full ok
237: %expect in grammar rule right                   ok
221: parse.error=verbose and consistent errors: parse.lac=full lr.default-reduction=accepting ok
238: %expect in grammar rules                        ok
243: %prec with user string                          ok
240: %expect-rr in grammar rule                      ok
205: parse.error=verbose and consistent errors: lr.type=ielr %glr-parser ok
246: %default-prec                                   ok
245: %no-default-prec with %prec                     ok
248: Solved conflicts report for multiple reductions in a state ok
231: Defaulted Conflicted Reduction                  ok
252: Unifying S/R                                    ok
254: S/R Conflict with Nullable Symbols              ok
255: Non-unifying Ambiguous S/R                      ok
253: Deep Unifying S/R                               ok
256: Non-unifying Unambiguous S/R                    ok
227: Syntax error in consistent error state: yacc.c  ok
257: S/R after first token                           ok
244: %no-default-prec without %prec                  ok
258: Unifying R/R counterexample                     ok
249: %nonassoc error actions for multiple reductions in a state ok
259: Non-unifying R/R LR(1) conflict                 ok
261: Cex Search Prepend                              ok
216: parse.error=verbose and consistent errors: %glr-parser ok
264: Non-unifying Prefix Share                       ok
262: R/R cex with prec                               ok
265: Deep Null Unifying                              ok
266: Deep Null Non-unifying                          ok
267: Prologue syncline                               ok
268: %union syncline                                 ok
269: %union name syncline                            ok
270: Postprologue syncline                           ok
271: Action syncline                                 ok
272: Epilogue syncline                               ok
273: %code top syncline                              ok
250: %expect-rr non GLR                              ok
274: %destructor syncline                            ok
275: %printer syncline                               ok
247: Unreachable States After Conflict Resolution    ok
280: %no-lines: yacc.c                               ok
203: %nonassoc and eof                               ok
281: %no-lines: glr.c                                ok
284: Output columns                                  ok
276: syncline escapes: yacc.c                        ok
206: parse.error=verbose and consistent errors: lr.type=ielr c++ ok
282: %no-lines: lalr1.cc                             ok
285: Invalid CPP guards:  --defines=input/input.h    ok
283: %no-lines: glr.cc                               ok
228: Syntax error in consistent error state: glr.c   ok
286: Invalid CPP guards:  --defines=9foo.h           ok
290: Sane headers:                                   ok
214: parse.error=verbose and consistent errors: c++ lr.type=ielr parse.lac=full ok
294: Sane headers: api.pure                          ok
295: Sane headers: api.push-pull=both                ok
291: Sane headers: %locations %debug                 ok
213: parse.error=verbose and consistent errors: c++ lr.type=canonical-lr parse.lac=full ok
296: Sane headers: api.pure api.push-pull=both       ok
289: export YYLTYPE                                  ok
138: C++ Output File Prefix Mapping                  ok
277: syncline escapes: glr.c                         ok
287: Invalid CPP guards: %glr-parser --defines=input/input.h ok
305: Invalid uses of %empty                          ok
288: Invalid CPP guards: %glr-parser --defines=9foo.h ok
307: Add missing %empty                              ok
222: LAC: %nonassoc requires splitting canonical LR states ok
229: Syntax error in consistent error state: lalr1.cc ok
230: Syntax error in consistent error state: glr.cc  ok
306: Valid uses of %empty                            ok
292: Sane headers: %glr-parser                       ok
308: Initial location: yacc.c                        ok
309: Initial location: yacc.c api.pure=full          ok
302: Midrule actions                                 ok
303: Typed midrule actions                           ok
310: Initial location: yacc.c api.pure %parse-param { int x } ok
304: Implicitly empty rule                           ok
311: Initial location: yacc.c api.push-pull=both     ok
293: Sane headers: %locations %debug %glr-parser     ok
312: Initial location: yacc.c api.push-pull=both api.pure=full ok
278: syncline escapes: lalr1.cc                      ok
317: Initial location: yacc.c api.pure=full          ok
319: Location print: yacc.c                          ok
318: Initial location: yacc.c api.pure=full          ok
279: syncline escapes: glr.cc                        ok
313: Initial location: glr.c                         ok
314: Initial location: glr.c api.pure                ok
251: -W versus %expect and %expect-rr                ok
324: Printers and Destructors                        ok
323: Exotic Dollars                                  ok
320: Location print: glr.c                           ok
325: Printers and Destructors with union             ok
315: Initial location: lalr1.cc                      ok
297: Sane headers: c++                               ok
335: Default %printer and %destructor are not for error or $undefined ok
336: Default %printer and %destructor are not for $accept ok
316: Initial location: glr.cc                        ok
338: @$ in %initial-action implies %locations        ok
299: Sane headers: c++ api.value.type=variant parse.assert ok
332: Default tagless %printer and %destructor        ok
321: Location print: lalr1.cc                        ok
333: Default tagged and per-type %printer and %destructor ok
322: Location print: glr.cc                          ok
327: Printers and Destructors with union: %glr-parser ok
347: %union vs. api.value.type                       ok
326: Printers and Destructors: %glr-parser           ok
348: %yacc vs. api.value.type=union                  ok
339: @$ in %destructor implies %locations            ok
340: @$ in %printer implies %locations               ok
341: Qualified $$ in actions: yacc.c                 ok
345: Destroying lookahead assigned by semantic action ok
349: yacc.c api.value.type={double}                  ok
346: YYBACKUP                                        ok
350: yacc.c api.value.type={double} %defines         ok
353: yacc.c api.value.type={struct foo}              ok
351: yacc.c api.value.type={variant}                 ok
352: yacc.c api.value.type={variant} %defines        ok
354: yacc.c api.value.type={struct foo} %defines     ok
337: Default %printer and %destructor for midrule values ok
355: yacc.c api.value.type={struct bar}              ok
334: Default %printer and %destructor for user-defined end token ok
328: Printers and Destructors: %defines lalr1.cc     ok
356: yacc.c api.value.type={struct bar} %defines     ok
300: Sane headers: %locations c++ %glr-parser        ok
329: Printers and Destructors with union: %defines lalr1.cc ok
361: yacc.c %union foo { float fval; int ival; };    ok
357: yacc.c api.value.type={union foo}               ok
358: yacc.c api.value.type={union foo} %defines      ok
360: yacc.c %union { float fval; int ival; }; %defines ok
359: yacc.c %union { float fval; int ival; };        ok
342: Qualified $$ in actions: glr.c                  ok
362: yacc.c %union foo { float fval; int ival; }; %defines ok
364: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
363: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; ok
298: Sane headers: %locations %debug c++             ok
365: yacc.c api.value.type=union                     ok
366: yacc.c api.value.type=union %defines            ok
330: Printers and Destructors: %defines glr.cc       ok
331: Printers and Destructors with union: %defines glr.cc ok
343: Qualified $$ in actions: lalr1.cc               ok
344: Qualified $$ in actions: glr.cc                 ok
374: glr.c api.value.type={struct bar} %defines      ok
367: glr.c api.value.type={double}                   ok
371: glr.c api.value.type={struct foo}               ok
369: glr.c api.value.type={variant}                  ok
370: glr.c api.value.type={variant} %defines         ok
375: glr.c api.value.type={union foo}                ok
379: glr.c %union foo { float fval; int ival; };     ok
377: glr.c %union { float fval; int ival; };         ok
376: glr.c api.value.type={union foo} %defines       ok
368: glr.c api.value.type={double} %defines          ok
372: glr.c api.value.type={struct foo} %defines      ok
373: glr.c api.value.type={struct bar}               ok
378: glr.c %union { float fval; int ival; }; %defines ok
380: glr.c %union foo { float fval; int ival; }; %defines ok
381: glr.c api.value.union.name=foo; %union { float fval; int ival; }; ok
382: glr.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
383: glr.c api.value.type=union                      ok
384: glr.c api.value.type=union %defines             ok
301: Several parsers                                 ok
387: lalr1.cc api.value.type={variant}               ok
389: lalr1.cc api.value.type={struct foo}            ok
388: lalr1.cc api.value.type={variant} %defines      ok
390: lalr1.cc api.value.type={struct foo} %defines   ok
396: lalr1.cc %union { float fval; int ival; }; %defines ok
392: lalr1.cc api.value.type={struct bar} %defines   ok
386: lalr1.cc api.value.type={double} %defines       ok
385: lalr1.cc api.value.type={double}                ok
393: lalr1.cc api.value.type={union foo}             ok
398: lalr1.cc api.value.type=union %defines          ok
391: lalr1.cc api.value.type={struct bar}            ok
397: lalr1.cc api.value.type=union                   ok
395: lalr1.cc %union { float fval; int ival; };      ok
394: lalr1.cc api.value.type={union foo} %defines    ok
403: lalr1.cc api.value.type=variant api.token.constructor ok
400: lalr1.cc api.value.type=variant %defines        ok
399: lalr1.cc api.value.type=variant                 ok
401: lalr1.cc api.value.type=variant                 ok
402: lalr1.cc api.value.type=variant %defines        ok
404: lalr1.cc api.value.type=variant api.token.constructor %defines ok
405: lalr1.cc %code requires { #include <memory> } api.value.type=variant ok
406: lalr1.cc %code requires { #include <memory> } api.value.type=variant %defines ok
425: lalr1.cc: Named %union                          ok
426: glr.cc: Named %union                            ok
410: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
427: Token numbers: yacc.c                           ok
428: Token numbers: yacc.c api.token.raw             ok
409: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
407: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
408: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
430: Token numbers: glr.c api.token.raw              ok
429: Token numbers: glr.c                            ok
435: Token numbers: lalr1.java                       skipped (scanner.at:336)
436: Token numbers: lalr1.java api.token.raw         skipped (scanner.at:336)
437: Token numbers: lalr1.d                          skipped (scanner.at:336)
438: Token numbers: lalr1.d api.token.raw            skipped (scanner.at:336)
416: glr.cc api.value.type={struct foo} %defines     ok
415: glr.cc api.value.type={struct foo}              ok
414: glr.cc api.value.type={variant} %defines        ok
417: glr.cc api.value.type={struct bar}              ok
411: glr.cc api.value.type={double}                  ok
431: Token numbers: lalr1.cc                         ok
412: glr.cc api.value.type={double} %defines         ok
432: Token numbers: lalr1.cc api.token.raw           ok
441: Calculator %defines                             ok
413: glr.cc api.value.type={variant}                 ok
440: Calculator parse.trace                          ok
433: Token numbers: glr.cc                           ok
434: Token numbers: glr.cc api.token.raw             ok
443: Calculator %locations api.location.type={Span}  ok
444: Calculator %name-prefix "calc"                  ok
445: Calculator %verbose                             ok
442: Calculator %debug %locations                    ok
446: Calculator %yacc                                ok
418: glr.cc api.value.type={struct bar} %defines     ok
447: Calculator parse.error=detailed                 ok
448: Calculator parse.error=verbose                  ok
449: Calculator api.pure=full %locations             ok
450: Calculator api.push-pull=both api.pure=full %locations  ok
451: Calculator parse.error=detailed %locations      ok
439: Token numbers: lalr1.cc api.token.raw api.value.type=variant api.token.constructor ok
419: glr.cc api.value.type={union foo}               ok
452: Calculator parse.error=detailed %locations %defines api.prefix={calc} %verbose %yacc  ok
453: Calculator parse.error=detailed %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
454: Calculator %debug                               ok
455: Calculator parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
456: Calculator parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
457: Calculator api.pure=full parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
462: Calculator parse.error=custom                   ok
458: Calculator api.push-pull=both api.pure=full parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
463: Calculator parse.error=custom %locations api.prefix={calc}  ok
460: Calculator %no-lines api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
459: Calculator api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
464: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
461: Calculator %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
465: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full  ok
466: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full parse.lac=full  ok
420: glr.cc api.value.type={union foo} %defines      ok
467: Calculator %glr-parser                          ok
469: Calculator %glr-parser %locations               ok
468: Calculator %glr-parser %defines                 ok
470: Calculator %glr-parser %locations api.location.type={Span}  ok
471: Calculator %glr-parser %name-prefix "calc"      ok
472: Calculator %glr-parser api.prefix={calc}        ok
473: Calculator %glr-parser %verbose                 ok
474: Calculator %glr-parser parse.error=verbose      ok
475: Calculator %glr-parser api.pure %locations      ok
476: Calculator %glr-parser parse.error=verbose %locations  ok
477: Calculator %glr-parser parse.error=custom %locations %defines %name-prefix "calc" %verbose  ok
421: glr.cc %union { float fval; int ival; };        ok
478: Calculator %glr-parser parse.error=detailed %locations %defines %name-prefix "calc" %verbose  ok
479: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose  ok
480: Calculator %glr-parser %debug                   ok
481: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
482: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
483: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
423: glr.cc api.value.type=union                     ok
485: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
484: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
422: glr.cc %union { float fval; int ival; }; %defines ok
486: Calculator %glr-parser %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
488: Calculator C++                                  ok
489: Calculator C++ %locations                       ok
491: Calculator C++ %locations api.location.type={Span}  ok
490: Calculator C++ %locations $NO_EXCEPTIONS_CXXFLAGS ok
493: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose  ok
495: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose  ok
496: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
494: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose  ok
487: Calculator lalr1.cc %defines                    ok
498: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
492: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose  ok
505: Calculator C++ parse.error=custom               ok
260: Non-unifying R/R LR(2) conflict                 ok
503: Calculator C++ %locations parse.lac=full parse.error=verbose  ok
504: Calculator C++ %locations parse.lac=full parse.error=detailed  ok
506: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
520: Calculator lalr1.d                              skipped (calc.at:1235)
521: Calculator D                                    skipped (calc.at:1240)
497: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
509: Calculator C++ %glr-parser                      ok
522: Calculator D %locations                         skipped (calc.at:1241)
523: Calculator D parse.error=verbose api.prefix={calc} %verbose  skipped (calc.at:1243)
524: Calculator D %debug                             skipped (calc.at:1245)
525: Calculator D parse.error=verbose %debug %verbose  skipped (calc.at:1247)
526: Calculator Java                                 skipped (calc.at:1263)
527: Calculator Java parse.error=custom              skipped (calc.at:1264)
508: Calculator glr.cc                               ok
507: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} parse.lac=full  ok
528: Calculator Java parse.error=detailed            skipped (calc.at:1265)
529: Calculator Java parse.error=verbose             skipped (calc.at:1266)
531: Calculator Java %locations parse.error=detailed  skipped (calc.at:1268)
530: Calculator Java %locations parse.error=custom   skipped (calc.at:1267)
500: Calculator C++ %defines %locations api.location.file=none  ok
501: Calculator C++ %defines %locations api.location.file="my-location.hh"  ok
532: Calculator Java %locations parse.error=verbose  skipped (calc.at:1269)
533: Calculator Java parse.trace parse.error=verbose  skipped (calc.at:1270)
534: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is}  skipped (calc.at:1271)
535: Calculator Java api.push-pull=both              skipped (calc.at:1273)
536: Calculator Java api.push-pull=both parse.error=detailed %locations  skipped (calc.at:1274)
537: Calculator Java parse.trace parse.error=custom %locations %lex-param {InputStream is} api.push-pull=both  skipped (calc.at:1275)
499: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
538: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is} api.push-pull=both  skipped (calc.at:1276)
541: State number type: 128 states                   skipped (torture.at:270)
542: State number type: 129 states                   skipped (torture.at:271)
502: Calculator C++ %no-lines %defines %locations api.location.file="my-location.hh"  ok
543: State number type: 256 states                   skipped (torture.at:272)
510: Calculator C++ %glr-parser %locations           ok
544: State number type: 257 states                   skipped (torture.at:273)
545: State number type: 32768 states                 skipped (torture.at:274)
546: State number type: 65536 states                 skipped (torture.at:275)
547: State number type: 65537 states                 skipped (torture.at:276)
424: glr.cc api.value.type=union %defines            ok
511: Calculator C++ %glr-parser %locations api.location.type={Span}  ok
513: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose  ok
514: Calculator C++ %glr-parser %debug               ok
515: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose  ok
549: Exploding the Stack Size with Alloca            ok
550: Exploding the Stack Size with Malloc            ok
516: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose  ok
561: YYSTYPE typedef                                 ok
562: Early token definitions with --yacc             ok
564: Braces parsing                                  ok
563: Early token definitions without --yacc          ok
565: Rule Line Numbers                               ok
512: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose  ok
569: Characters Escapes                              ok
570: Web2c Report                                    ok
560: Trivial grammars                                ok
566: Mixing %token styles                            ok
571: Web2c Actions                                   ok
539: Big triangle                                    ok
567: Token definitions: parse.error=detailed         ok
568: Token definitions: parse.error=verbose          ok
572: Dancer                                          ok
551: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
579: String alias declared after use                 ok
575: Expecting two tokens                            ok
580: Extra lookahead sets in report                  ok
552: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
578: Braced code in declaration in rules section     ok
584: parse.error=verbose overflow                    ok
583: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
517: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
573: Dancer %glr-parser                              ok
581: Token number in precedence declaration          ok
576: Expecting two tokens %glr-parser                ok
518: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
587: Lex and parse params: yacc.c                    ok
540: Big horizontal                                  ok
594: Unsupported Skeletons                           ok
582: parse-gram.y: LALR = IELR                       ok
519: Calculator C++ %glr-parser %no-lines %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
555: GNU Cim Grammar: IELR(1)                        ok
591: stdio.h is not needed                           ok
574: Dancer lalr1.cc                                 ok
554: GNU Cim Grammar: LALR(1)                        ok
592: Memory Leak for Early Deletion                  ok
557: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
593: Multiple impure instances                       ok
597: Multiple occurrences of $n and api.value.automove ok
588: Lex and parse params: glr.c                     ok
577: Expecting two tokens lalr1.cc                   ok
558: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
608: Doxygen Public Documentation                    skipped (c++.at:794)
609: Doxygen Private Documentation                   skipped (c++.at:795)
589: Lex and parse params: lalr1.cc                  ok
590: Lex and parse params: glr.cc                    ok
586: LAC: Memory exhaustion                          ok
612: Syntactically invalid namespace references      ok
553: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
585: LAC: Exploratory stack                          ok
548: Many lookahead tokens                           ok
613: Syntax error discarding no lookahead            ok
595: C++ Locations Unit Tests                        ok
559: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok
607: Variants and Typed Midrule Actions              ok
596: C++ Variant-based Symbols Unit Tests            ok
621: Shared locations                                ok
623: Java invalid directives                         ok
624: Java parser class and package names             skipped (java.at:173)
625: Java parser class modifiers                     skipped (java.at:204)
614: Syntax error as exception: lalr1.cc             ok
626: Java parser class extends and implements        skipped (java.at:274)
627: Java %parse-param and %lex-param                skipped (java.at:294)
629: Java constructor init and init_throws           skipped (java.at:460)
628: Java throws specifications                      skipped (java.at:426)
630: Java value, position, and location types        skipped (java.at:484)
631: Java syntax error handling without error token  skipped (java.at:565)
633: Trivial Push Parser with %initial-action        skipped (javapush.at:230)
632: Trivial Push Parser with api.push-pull verification skipped (javapush.at:207)
634: GLR: Resolve ambiguity, impure, no locations    ok
635: GLR: Resolve ambiguity, impure, locations       ok
615: Syntax error as exception: glr.cc               ok
636: GLR: Resolve ambiguity, pure, no locations      ok
638: GLR: Merge conflicting parses, impure, no locations ok
637: GLR: Resolve ambiguity, pure, locations         ok
616: Exception safety with error recovery            ok
639: GLR: Merge conflicting parses, impure, locations ok
640: GLR: Merge conflicting parses, pure, no locations ok
641: GLR: Merge conflicting parses, pure, locations  ok
598: Variants lalr1.cc                               ok
642: GLR: Verbose messages, resolve ambiguity, impure, no locations ok
643: Badly Collapsed GLR States                      ok
644: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
647: User destructor for unresolved GLR semantic value ok
646: Duplicate representation of merged trees        ok
645: Improper merging of GLR delayed action sets     ok
648: User destructor after an error during a split parse ok
649: Duplicated user destructor for lookahead        ok
651: No users destructors if stack 0 deleted         ok
650: Incorrectly initialized location for empty right-hand side in GLR ok
652: Corrupted semantic options if user action cuts parse ok
600: Variants lalr1.cc parse.assert api.value.automove ok
620: C++ GLR parser identifier shadowing             ok
599: Variants lalr1.cc parse.assert                  ok
660: Missed %merge type warnings when LHS type is declared later ok
602: Variants lalr1.cc parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
653: Undesirable destructors if user action cuts parse ok
654: Leaked semantic values if user action cuts parse ok
655: Incorrect lookahead during deterministic GLR    ok
603: Variants lalr1.cc parse.assert api.token.constructor ok
657: Leaked semantic values when reporting ambiguity ok
656: Incorrect lookahead during nondeterministic GLR ok
658: Leaked lookahead after nondeterministic parse syntax error ok
662: Predicates                                      ok
601: Variants lalr1.cc parse.assert %locations       ok
659: Uninitialized location when reporting ambiguity ok
661: Ambiguity reports                               ok
604: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} ok
617: Exception safety without error recovery         ok
606: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations api.value.automove ok
605: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations ok
622: Default action                                  ok
610: Relative namespace references                   ok
618: Exception safety with error recovery api.value.type=variant ok
619: Exception safety without error recovery api.value.type=variant ok
556: GNU Cim Grammar: Canonical LR(1)                ok
611: Absolute namespace references                   ok
263: Null nonterminals                               ok

## ------------- ##
## Test results. ##
## ------------- ##

619 tests were successful.
43 tests were skipped.
make[4]: Leaving directory '/sources/bison-3.7.5'
make[3]: Leaving directory '/sources/bison-3.7.5'
make[2]: Leaving directory '/sources/bison-3.7.5'
make[1]: Leaving directory '/sources/bison-3.7.5'
